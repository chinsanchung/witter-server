{"version":3,"sources":["context/AuthContext.tsx","components/ProfileImage.tsx","components/Buttons/Comment.tsx","components/Buttons/Retweet.tsx","components/Buttons/Heart.tsx","components/Buttons/Share.tsx","components/Tweet/SmallTweet.tsx","components/Tweet/TweetList.tsx","util/createRandomTweetId.ts","pages/Home/AddTweet.tsx","components/Header/JoinButton.tsx","components/Header/LoginButton.tsx","components/Header/LogoutButton.tsx","components/Header/Header.tsx","pages/Home/index.tsx","assets/Logo blue.svg","components/AuthButton.tsx","components/AuthInput.tsx","pages/Join/index.tsx","pages/Login/index.tsx","components/Buttons/FollowButton.tsx","pages/User/UserProfile.tsx","pages/User/index.tsx","pages/Main/index.tsx","components/Tweet/DetailTweet.tsx","pages/Tweet/AddComment.tsx","pages/Tweet/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initialState","isLogin","user","user_id","name","follower","following","profile_color","description","AuthContext","createContext","useAuthContext","context","useContext","Error","authReducer","prevState","action","type","payload","console","log","AuthProvider","children","useReducer","store","authDispath","Provider","value","Container","styled","div","Profile","props","size","css","color","ProfileImage","history","useHistory","moveToUserTimeLine","useCallback","e","preventDefault","stopPropagation","push","onClick","Icon","FontAwesomeIcon","CountWrapper","Comment","comments","showCount","comments_count","useMemo","length","icon","faComment","isactive","Retweet","retweet","isActive","includes","retweet_count","onChangeRetweet","alert","faRetweet","Heart","like","like_count","onChangeHeart","activeHeart","nonActiveHeart","Share","faExternalLinkAlt","Wrapper","ContentsArea","UserName","span","UserId","ButtonWrapper","SmallTweet","moveToDetailPage","tweet_id","className","style","display","marginRight","marginTop","contents","TweetList","data","map","idx","createRandomTweetId","time","Date","getTime","randomNumber","Math","floor","random","parseInt","Input","input","SubmitButton","Button","AddTweet","useState","setContents","inputContents","target","onSubmit","a","axios","post","placeholder","onChange","maxLength","button","JoinButton","moveToPage","LoginButton","LogoutButton","authDispatch","onStartLogout","get","response","Header","marginLeft","Home","tweetList","setTweetList","loading","setLoading","authStore","getHomeTImeLine","useEffect","AuthButton","text","AuthInput","WrapperDiv","LogoSvg","img","Join","userId","setUserId","setName","email","setEmail","password","setPassword","inputUserId","inputName","inputEmail","inputPassword","status","headers","src","logo","JoinWrapper","Login","seEmail","moveToJoin","isFollow","ProfileEditButton","FollowButton","login_user_id","target_user_id","isLoginedUserProfile","onClickFollowButton","apiUrl","patch","go","moveToEditPage","ProfileWrapper","DescriptionWrapper","FollowButtonWrapper","FollowCountWrapper","CountArea","UserProfile","follower_count","following_count","User","params","useParams","userInfo","setUserInfo","getUserTimeLine","userid","timeLine","Main","ProfileArea","CountsWrapper","DetailTweet","create_date","AddComment","target_tweet_id","refreshComment","Tweet","errorMessage","video","image","is_active","firstTweet","setFirstTweet","setComments","getDetailTweet","tweetid","origin","App","sessionLogin","setTimeout","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaults","withCredentials","baseURL","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0db5cb76.chunk.js","sourcesContent":["import React, { createContext, useReducer, useContext } from 'react';\r\nimport { IMedia } from '../types';\r\n\r\ninterface IUserProps {\r\n  isLogin: boolean;\r\n  user: {\r\n    user_id: string;\r\n    name: string;\r\n    // join_date: string;\r\n    follower: string[];\r\n    following: string[];\r\n    profile_color: string;\r\n    description: string;\r\n  };\r\n}\r\nconst initialState: IUserProps = {\r\n  isLogin: false,\r\n  user: {\r\n    user_id: '',\r\n    name: '',\r\n    follower: [],\r\n    following: [],\r\n    profile_color: '#17517e',\r\n    description: '',\r\n  },\r\n};\r\n\r\nexport const AuthContext = createContext(initialState);\r\n\r\nexport function useAuthContext() {\r\n  const context = useContext(AuthContext);\r\n  if (!context) throw new Error('AuthContext 없음.');\r\n  return context;\r\n}\r\n\r\n// @ts-ignore\r\nconst authReducer = (prevState, action) => {\r\n  switch (action.type) {\r\n    case 'LOGIN': {\r\n      return {\r\n        isLogin: true,\r\n        user: action.payload,\r\n      };\r\n    }\r\n    case 'LOGOUT': {\r\n      return {\r\n        isLogin: false,\r\n        user: {\r\n          user_id: '',\r\n          name: '',\r\n          follower: [],\r\n          following: [],\r\n          profile_color: '#17517e',\r\n          description: '',\r\n        },\r\n      };\r\n    }\r\n    default: {\r\n      console.log('context 에러');\r\n      return prevState;\r\n    }\r\n  }\r\n};\r\n\r\nexport function AuthProvider({ children }: { children: React.ReactChild }) {\r\n  const [store, authDispath] = useReducer(authReducer, initialState);\r\n  return (\r\n    // @ts-ignore\r\n    <AuthContext.Provider value={[store, authDispath]}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n","import React, { useCallback } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled, { css } from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  z-index: 1;\r\n  cursor: pointer;\r\n`;\r\n\r\ninterface IProfileImageProps {\r\n  size: 'big' | 'middle' | 'small';\r\n  color: string;\r\n  user_id?: string;\r\n}\r\n\r\nconst Profile = styled.div<IProfileImageProps>`\r\n  ${(props) =>\r\n    props.size === 'big'\r\n      ? css`\r\n          width: 135px;\r\n          height: 135px;\r\n        `\r\n      : props.size === 'middle'\r\n      ? css`\r\n          width: 64px;\r\n          height: 64px;\r\n        `\r\n      : css`\r\n          width: 48px;\r\n          height: 48px;\r\n        `}\r\n  border-radius: 50%;\r\n  border: 1px solid #dfdfdf;\r\n  background-color: ${(props) => props.color};\r\n`;\r\n\r\n// @ts-ignore\r\nexport default function ProfileImage({\r\n  size,\r\n  color,\r\n  user_id,\r\n}: IProfileImageProps) {\r\n  const history = useHistory();\r\n  const moveToUserTimeLine = useCallback(\r\n    (e: React.MouseEvent<HTMLElement>) => {\r\n      // AddTweet, AddComment 에서는 이동하지 않도록 막기 위해서 조건문을 추가했습니다.\r\n      if (user_id) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        history.push(`/${user_id}`);\r\n        return;\r\n      } else return;\r\n    },\r\n    [history, user_id]\r\n  );\r\n  return (\r\n    <Container onClick={moveToUserTimeLine}>\r\n      <Profile size={size} color={color} />\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faComment } from '@fortawesome/free-regular-svg-icons';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  z-index: 1;\r\n  text-align: center;\r\n`;\r\n\r\nconst Icon = styled(FontAwesomeIcon)`\r\n  font-size: 1rem;\r\n`;\r\n\r\nconst CountWrapper = styled.div`\r\n  display: inline-block;\r\n  margin-left: 5px;\r\n  span {\r\n    font-size: 0.8rem;\r\n  }\r\n`;\r\n\r\ninterface IComment {\r\n  comments: string[];\r\n  showCount: boolean;\r\n}\r\n\r\nexport default function Comment({ comments, showCount }: IComment) {\r\n  const comments_count = useMemo(() => {\r\n    return comments.length;\r\n  }, [comments]);\r\n  return (\r\n    <Container>\r\n      <Icon icon={faComment} />\r\n      {showCount && (\r\n        <CountWrapper>\r\n          {comments_count > 0 ? <span>{comments_count}</span> : <></>}\r\n        </CountWrapper>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useCallback, useMemo } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faRetweet } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  z-index: 1;\r\n  text-align: center;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Icon = styled(FontAwesomeIcon)<{ isactive: boolean }>`\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  ${(props) =>\r\n    props.isactive &&\r\n    css`\r\n      color: green;\r\n    `}\r\n`;\r\n\r\nconst CountWrapper = styled.div`\r\n  display: inline-block;\r\n  margin-left: 5px;\r\n  span {\r\n    font-size: 0.8rem;\r\n  }\r\n`;\r\n\r\ninterface IRetweet {\r\n  user_id: string;\r\n  retweet: string[];\r\n  isLogin: boolean;\r\n  showCount: boolean;\r\n}\r\n\r\nexport default function Retweet({\r\n  user_id,\r\n  retweet,\r\n  isLogin,\r\n  showCount,\r\n}: IRetweet) {\r\n  const isActive = useMemo(() => {\r\n    if (retweet.includes(user_id)) {\r\n      return true;\r\n    } else return false;\r\n  }, [user_id, retweet]);\r\n  const retweet_count = useMemo(() => {\r\n    return retweet.length;\r\n  }, [retweet]);\r\n\r\n  const onChangeRetweet = useCallback(() => {\r\n    if (!isLogin) {\r\n      alert('로그인 후 이용할 수 있습니다.');\r\n    } else {\r\n      console.log('test');\r\n    }\r\n  }, [isLogin]);\r\n\r\n  return (\r\n    <Container>\r\n      <Icon isactive={isActive} icon={faRetweet} onClick={onChangeRetweet} />\r\n      {showCount && (\r\n        <CountWrapper>\r\n          {retweet_count > 0 ? <span>{retweet_count}</span> : <></>}\r\n        </CountWrapper>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useCallback, useMemo } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHeart as activeHeart } from '@fortawesome/free-solid-svg-icons';\r\nimport { faHeart as nonActiveHeart } from '@fortawesome/free-regular-svg-icons';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  z-index: 1;\r\n  text-align: center;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Icon = styled(FontAwesomeIcon)<{ isactive: boolean }>`\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  ${(props) =>\r\n    props.isactive &&\r\n    css`\r\n      color: #f91880;\r\n    `}\r\n`;\r\n\r\nconst CountWrapper = styled.div`\r\n  display: inline-block;\r\n  margin-left: 5px;\r\n  span {\r\n    font-size: 0.8rem;\r\n  }\r\n`;\r\n\r\ninterface IHeartProps {\r\n  user_id: string;\r\n  like: string[];\r\n  isLogin: boolean;\r\n  showCount: boolean;\r\n}\r\n\r\nexport default function Heart({\r\n  user_id,\r\n  like,\r\n  isLogin,\r\n  showCount,\r\n}: IHeartProps) {\r\n  const isActive = useMemo(() => {\r\n    if (like.includes(user_id)) {\r\n      return true;\r\n    } else return false;\r\n  }, [user_id, like]);\r\n  const like_count = useMemo(() => {\r\n    return like.length;\r\n  }, [like]);\r\n\r\n  const onChangeHeart = useCallback(() => {\r\n    if (!isLogin) {\r\n      alert('로그인 후 이용할 수 있습니다.');\r\n    } else {\r\n      console.log('test');\r\n    }\r\n  }, [isLogin]);\r\n\r\n  return (\r\n    <Container>\r\n      <Icon\r\n        isactive={isActive}\r\n        icon={isActive ? activeHeart : nonActiveHeart}\r\n        onClick={onChangeHeart}\r\n      />\r\n      {showCount && (\r\n        <CountWrapper>\r\n          {like_count > 0 ? <span>{like_count}</span> : <></>}\r\n        </CountWrapper>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faExternalLinkAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  z-index: 1;\r\n  text-align: center;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Icon = styled(FontAwesomeIcon)`\r\n  font-size: 1rem;\r\n`;\r\n\r\nexport default function Share() {\r\n  return (\r\n    <Container>\r\n      <Icon icon={faExternalLinkAlt} />\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useCallback, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { ITweet } from '../../types';\r\nimport ProfileImage from '../ProfileImage';\r\nimport Comment from '../Buttons/Comment';\r\nimport Retweet from '../Buttons/Retweet';\r\nimport Heart from '../Buttons/Heart';\r\nimport Share from '../Buttons/Share';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  min-height: 100px;\r\n  z-index: 0;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  min-height: 100px;\r\n  display: flex;\r\n  align-items: center;\r\n  box-sizing: border-box;\r\n  padding: 12px 16px;\r\n  border-top: 1px solid rgb(239, 243, 244);\r\n  border-bottom: 1px solid rgb(239, 243, 244);\r\n`;\r\n\r\nconst ContentsArea = styled.div`\r\n  position: relative;\r\n  margin-left: 10px;\r\n`;\r\nconst UserName = styled.span`\r\n  color: black;\r\n  font-weight: bold;\r\n`;\r\nconst UserId = styled.span`\r\n  color: rgb(83, 100, 113);\r\n`;\r\nconst ButtonWrapper = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 48px;\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  box-sizing: border-box;\r\n  padding: 0px 70px;\r\n  border-bottom: 1px solid rgb(239, 243, 244);\r\n`;\r\n\r\ninterface ISmallTweetProps {\r\n  value: ITweet;\r\n  user_id: string;\r\n  isLogin: boolean;\r\n}\r\n\r\n//@ts-ignore\r\nexport default function SmallTweet({\r\n  value,\r\n  user_id,\r\n  isLogin,\r\n}: ISmallTweetProps) {\r\n  const history = useHistory();\r\n  const moveToDetailPage = useCallback(() => {\r\n    history.push(`/${value.user_id}/status/${value.tweet_id}`);\r\n    return;\r\n  }, [history, value]);\r\n  return (\r\n    <Container onClick={moveToDetailPage}>\r\n      <Wrapper>\r\n        {/* // @ts-ignore */}\r\n        <ProfileImage\r\n          size=\"small\"\r\n          color={value.user.profile_color}\r\n          user_id={value.user.user_id}\r\n        />\r\n        <ContentsArea>\r\n          <div\r\n            className=\"user_name\"\r\n            style={{ display: 'inline-block', marginRight: 3 }}\r\n          >\r\n            <UserName>{value.user.name}</UserName>\r\n          </div>\r\n          <div className=\"user_id\" style={{ display: 'inline-block' }}>\r\n            <UserId>{`@${value.user.user_id}`}</UserId>\r\n          </div>\r\n          <div className=\"contents\" style={{ marginTop: 5 }}>\r\n            <span>{value.contents}</span>\r\n          </div>\r\n        </ContentsArea>\r\n      </Wrapper>\r\n      <ButtonWrapper>\r\n        <Comment comments={value.comments} showCount={true} />\r\n        <Retweet\r\n          retweet={value.retweet}\r\n          user_id={user_id}\r\n          isLogin={isLogin}\r\n          showCount={true}\r\n        />\r\n        <Heart\r\n          like={value.like}\r\n          user_id={user_id}\r\n          isLogin={isLogin}\r\n          showCount={true}\r\n        />\r\n        <Share />\r\n      </ButtonWrapper>\r\n      {/* <ActionButtons\r\n        comments={value.comments}\r\n        retweet={value.retweet}\r\n        like={value.like}\r\n        user_id={user_id}\r\n        isLogin={isLogin}\r\n      /> */}\r\n    </Container>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { ITweet } from '../../types';\r\nimport SmallTweet from './SmallTweet';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  border-left: 1px solid rgb(239, 243, 244);\r\n  border-right: 1px solid rgb(239, 243, 244);\r\n`;\r\n\r\ninterface ITweetList {\r\n  data: ITweet[];\r\n  user_id: string;\r\n  isLogin: boolean;\r\n}\r\n//@ts-ignore {/* @ts-ignore */}\r\nexport default function TweetList({ data, user_id, isLogin }: ITweetList) {\r\n  return (\r\n    <Container>\r\n      {data.map((value, idx) => (\r\n        <div key={idx}>\r\n          <SmallTweet value={value} user_id={user_id} isLogin={isLogin} />\r\n        </div>\r\n      ))}\r\n    </Container>\r\n  );\r\n}\r\n","// 트윗 아이디 만들기. getTime 하고 유저아이디 결합하기?\r\n// 트윗 아이디 만들기. getTime 하고 유저아이디 결합하기?\r\nconst createRandomTweetId = () => {\r\n  const time: number = new Date().getTime();\r\n  // 출처: https://stackoverflow.com/a/21816629\r\n  const randomNumber: number = Math.floor(Math.random() * 899999 + 100000);\r\n  return parseInt(`${time}${randomNumber}`);\r\n};\r\n\r\nexport default createRandomTweetId;\r\n","import axios from 'axios';\r\nimport React, { useCallback, useState } from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport styled from 'styled-components';\r\nimport ProfileImage from '../../components/ProfileImage';\r\nimport createRandomTweetId from '../../util/createRandomTweetId';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n`;\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  min-height: 100px;\r\n  display: flex;\r\n  align-items: center;\r\n  box-sizing: border-box;\r\n  padding: 12px 16px;\r\n  border-top: 1px solid rgb(239, 243, 244);\r\n  border-bottom: 1px solid rgb(239, 243, 244);\r\n`;\r\nconst ContentsArea = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: end;\r\n  width: 100%;\r\n  margin-left: 10px;\r\n`;\r\nconst Input = styled.input`\r\n  width: 100%;\r\n  max-width: 510px;\r\n  height: 52px;\r\n  border: 0;\r\n  min-height: 28px;\r\n  box-sizing: border-box;\r\n  padding-left: 16px;\r\n  font-size: 18px;\r\n  &&:focus {\r\n    outline: none;\r\n  }\r\n`;\r\nconst SubmitButton = styled(Button)`\r\n  width: 94px;\r\n  height: 36px;\r\n  background-color: rgb(29, 155, 240);\r\n  border-radius: 20px;\r\n  border: 0;\r\n\r\n  p {\r\n    color: #fff;\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\nexport default function AddTweet({ profile_color }: { profile_color: string }) {\r\n  const [contents, setContents] = useState('');\r\n\r\n  const inputContents = useCallback(\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setContents(e.target.value);\r\n    },\r\n    []\r\n  );\r\n  const onSubmit = useCallback(async () => {\r\n    try {\r\n      const tweet_id = createRandomTweetId();\r\n      await axios.post('/tweet/create', { tweet_id, contents });\r\n      return;\r\n    } catch (error) {\r\n      console.log('트윗 등록 에러', error);\r\n    }\r\n  }, [contents]);\r\n\r\n  return (\r\n    <Container>\r\n      <Wrapper>\r\n        <ProfileImage size=\"small\" color={profile_color} />\r\n        <ContentsArea>\r\n          <Input\r\n            value={contents}\r\n            placeholder=\"무슨 일이 일어나고 있나요?\"\r\n            type=\"text\"\r\n            onChange={inputContents}\r\n            maxLength={140}\r\n          />\r\n          <SubmitButton onClick={onSubmit}>\r\n            <p>트윗하기</p>\r\n          </SubmitButton>\r\n        </ContentsArea>\r\n      </Wrapper>\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useCallback } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { useAuthContext } from '../../context/AuthContext';\r\n\r\nconst Button = styled.button`\r\n  background-color: rgb(29, 155, 240);\r\n  align-self: center;\r\n  width: 91px;\r\n  height: 30px;\r\n  border-radius: 10px;\r\n  box-sizing: border-box;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  color: #ffffff;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 1rem;\r\n  font-weight: 600;\r\n`;\r\n\r\nexport default function JoinButton() {\r\n  const history = useHistory();\r\n  // @ts-ignore\r\n  const [, authDispatch] = useAuthContext();\r\n\r\n  const moveToPage = useCallback(() => {\r\n    return history.push('/join');\r\n  }, [history]);\r\n\r\n  return (\r\n    <Button onClick={moveToPage}>\r\n      <span>회원가입</span>\r\n    </Button>\r\n  );\r\n}\r\n","import React, { useCallback } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { useAuthContext } from '../../context/AuthContext';\r\n\r\nconst Button = styled.button`\r\n  background-color: rgb(29, 155, 240);\r\n  align-self: center;\r\n  width: 91px;\r\n  height: 30px;\r\n  border-radius: 10px;\r\n  box-sizing: border-box;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  color: #ffffff;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 1rem;\r\n  font-weight: 600;\r\n`;\r\n\r\nexport default function LoginButton() {\r\n  const history = useHistory();\r\n  // @ts-ignore\r\n  const [, authDispatch] = useAuthContext();\r\n\r\n  const moveToPage = useCallback(() => {\r\n    return history.push('/login');\r\n  }, [history]);\r\n\r\n  return (\r\n    <Button onClick={moveToPage}>\r\n      <span>로그인</span>\r\n    </Button>\r\n  );\r\n}\r\n","import React, { useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { useAuthContext } from '../../context/AuthContext';\r\n\r\nconst Button = styled.button`\r\n  background-color: rgb(29, 155, 240);\r\n  align-self: center;\r\n  width: 91px;\r\n  height: 30px;\r\n  border-radius: 10px;\r\n  box-sizing: border-box;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  color: #ffffff;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 1rem;\r\n  font-weight: 600;\r\n`;\r\n\r\nexport default function LogoutButton() {\r\n  const history = useHistory();\r\n  // @ts-ignore\r\n  const [, authDispatch] = useAuthContext();\r\n\r\n  const onStartLogout = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get('/auth/logout');\r\n      console.log('로그아웃 결과', response.data);\r\n      authDispatch({ type: 'LOGOUT' });\r\n      history.push('/login');\r\n      return;\r\n    } catch (error) {\r\n      console.log('에러', error);\r\n      return;\r\n    }\r\n  }, [authDispatch, history]);\r\n\r\n  return (\r\n    <Button onClick={onStartLogout}>\r\n      <span>로그아웃</span>\r\n    </Button>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport JoinButton from './JoinButton';\r\nimport LoginButton from './LoginButton';\r\nimport LogoutButton from './LogoutButton';\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: end;\r\n  align-items: center;\r\n  box-sizing: border-box;\r\n  padding: 10px 0;\r\n`;\r\n\r\nexport default function Header({ isLogin }: { isLogin: boolean }) {\r\n  return (\r\n    <Container>\r\n      {isLogin ? (\r\n        <LogoutButton />\r\n      ) : (\r\n        <>\r\n          <>\r\n            <LoginButton />\r\n          </>\r\n          <div style={{ marginLeft: 5 }}>\r\n            <JoinButton />\r\n          </div>\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unused-expressions */\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useHistory } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { ITweet } from '../../types';\r\nimport TweetList from '../../components/Tweet/TweetList';\r\nimport AddTweet from './AddTweet';\r\nimport { useAuthContext } from '../../context/AuthContext';\r\nimport Header from '../../components/Header/Header';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport default function Home() {\r\n  const history = useHistory();\r\n  const [tweetList, setTweetList] = useState<ITweet[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  // @ts-ignore\r\n  const [authStore, authDispatch] = useAuthContext();\r\n  // useSWR?\r\n  const getHomeTImeLine = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get('/reading/home');\r\n      console.log('홈', response.data);\r\n      setTweetList(response.data);\r\n      setLoading(false);\r\n      return;\r\n    } catch (error) {\r\n      console.log('에러', error);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (authStore.isLogin) {\r\n      getHomeTImeLine();\r\n    } else {\r\n      history.push('/login');\r\n    }\r\n  }, [authStore, getHomeTImeLine, history]);\r\n\r\n  if (loading) return <></>;\r\n  return (\r\n    <Container>\r\n      <Header isLogin={authStore?.isLogin} />\r\n      {/* {authStore?.isLogin && (\r\n        )} */}\r\n      <AddTweet profile_color={authStore?.user?.profile_color} />\r\n      {/* @ts-ignore */}\r\n      {tweetList.length === 0 && <h5>타임라인에 트윗이 없습니다.</h5>}\r\n      <TweetList\r\n        data={tweetList}\r\n        user_id={authStore?.user?.user_id}\r\n        isLogin={authStore?.isLogin}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/Logo blue.bf36f3f6.svg\";","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  background-color: rgb(29, 155, 240);\r\n  align-self: center;\r\n  width: 100%;\r\n  height: 52px;\r\n  border-radius: 10px;\r\n  box-sizing: border-box;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  color: #ffffff;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 1.2rem;\r\n  font-weight: 600;\r\n`;\r\n// @ts-ignore\r\nexport default function AuthButton({ text, onClick }) {\r\n  return <Button onClick={onClick}>{text}</Button>;\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Input = styled.input`\r\n  width: 100%;\r\n  height: 43px;\r\n  box-sizing: border-box;\r\n  margin-bottom: 12px;\r\n  border-radius: 3px;\r\n  padding-left: 16px;\r\n  font-size: 14px;\r\n`;\r\n// @ts-ignore\r\nexport default function AuthInput({ value, placeholder, type, onChange }) {\r\n  return (\r\n    <Input\r\n      value={value}\r\n      placeholder={placeholder}\r\n      type={type}\r\n      onChange={onChange}\r\n    />\r\n  );\r\n}\r\n","import axios from 'axios';\r\nimport React, { useState, useCallback } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport logo from '../../assets/Logo blue.svg';\r\nimport AuthButton from '../../components/AuthButton';\r\nimport AuthInput from '../../components/AuthInput';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  margin-top: 5%;\r\n`;\r\nconst WrapperDiv = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  min-width: 300px;\r\n  width: 30%;\r\n  box-sizing: border-box;\r\n  padding: 50px 10px;\r\n  margin: 0 auto;\r\n`;\r\nconst LogoSvg = styled.img`\r\n  width: 80px;\r\n  margin-bottom: 50px;\r\n`;\r\n\r\nexport default function Join() {\r\n  const history = useHistory();\r\n  const [userId, setUserId] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const inputUserId = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setUserId(e.target.value);\r\n  }, []);\r\n  const inputName = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setName(e.target.value);\r\n  }, []);\r\n  const inputEmail = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setEmail(e.target.value);\r\n  }, []);\r\n  const inputPassword = useCallback(\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setPassword(e.target.value);\r\n    },\r\n    []\r\n  );\r\n  const onSubmit = useCallback(\r\n    async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      e.preventDefault();\r\n      try {\r\n        await axios.post('/auth/join', {\r\n          email,\r\n          password,\r\n          name,\r\n          user_id: userId,\r\n        });\r\n        alert('회원 가입이 완료되었습니다. 로그인 페이지로 이동합니다.');\r\n        history.push('/login');\r\n        return;\r\n      } catch (error: any) {\r\n        console.log(error.response.data);\r\n        console.log(error.response.status);\r\n        console.log(error.response.headers);\r\n        alert(error.response.data);\r\n        return;\r\n      }\r\n    },\r\n    [email, history, name, password, userId]\r\n  );\r\n\r\n  return (\r\n    <Container>\r\n      <WrapperDiv>\r\n        <LogoSvg src={logo} />\r\n        <form>\r\n          <AuthInput\r\n            placeholder=\"아이디를 입력하세요\"\r\n            value={userId}\r\n            type=\"text\"\r\n            onChange={inputUserId}\r\n          />\r\n          <AuthInput\r\n            placeholder=\"이름을 입력하세요\"\r\n            value={name}\r\n            type=\"text\"\r\n            onChange={inputName}\r\n          />\r\n          <AuthInput\r\n            placeholder=\"이메일를 입력하세요\"\r\n            value={email}\r\n            type=\"text\"\r\n            onChange={inputEmail}\r\n          />\r\n          <AuthInput\r\n            placeholder=\"비밀번호를 입력하세요\"\r\n            value={password}\r\n            type=\"password\"\r\n            onChange={inputPassword}\r\n          />\r\n          <AuthButton text=\"회원가입\" onClick={onSubmit} />\r\n        </form>\r\n      </WrapperDiv>\r\n    </Container>\r\n  );\r\n}\r\n","import axios from 'axios';\r\nimport React, { useState, useCallback, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport logo from '../../assets/Logo blue.svg';\r\nimport AuthButton from '../../components/AuthButton';\r\nimport AuthInput from '../../components/AuthInput';\r\nimport { useAuthContext } from '../../context/AuthContext';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  margin-top: 5%;\r\n`;\r\nconst WrapperDiv = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  min-width: 300px;\r\n  width: 30%;\r\n  box-sizing: border-box;\r\n  padding: 50px 10px;\r\n  margin: 0 auto;\r\n`;\r\nconst LogoSvg = styled.img`\r\n  width: 80px;\r\n  margin-bottom: 50px;\r\n`;\r\nconst JoinWrapper = styled.div`\r\n  margin-top: 10px;\r\n  span {\r\n    cursor: pointer;\r\n    color: #1a0dab;\r\n    &:hover {\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function Login() {\r\n  const history = useHistory();\r\n  const [email, seEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  // @ts-ignore\r\n  const [authStore, authDispatch] = useAuthContext();\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const inputUserId = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n    seEmail(e.target.value);\r\n  }, []);\r\n  const inputPassword = useCallback(\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setPassword(e.target.value);\r\n    },\r\n    []\r\n  );\r\n  const onSubmit = useCallback(\r\n    async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      e.preventDefault();\r\n      try {\r\n        // const response = await axios.post('/auth/login', {\r\n        //   email: 'test@g.com',\r\n        //   password: '123',\r\n        // });\r\n        const response = await axios.post('/auth/login', { email, password });\r\n        console.log('response', response.data);\r\n        authDispatch({ type: 'LOGIN', payload: response.data });\r\n\r\n        return history.push('/home');\r\n      } catch (error) {\r\n        console.log('에러', error);\r\n        return;\r\n      }\r\n    },\r\n    [authDispatch, email, history, password]\r\n  );\r\n\r\n  const moveToJoin = useCallback(() => {\r\n    history.push('/join');\r\n  }, [history]);\r\n\r\n  useEffect(() => {\r\n    if (authStore?.isLogin) {\r\n      history.push('/home');\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }, [authStore, history]);\r\n\r\n  if (loading) return <></>;\r\n\r\n  return (\r\n    <Container>\r\n      <WrapperDiv>\r\n        <LogoSvg src={logo} />\r\n        <form>\r\n          <AuthInput\r\n            placeholder=\"이메일를 입력하세요\"\r\n            value={email}\r\n            type=\"text\"\r\n            onChange={inputUserId}\r\n          />\r\n          <AuthInput\r\n            placeholder=\"비밀번호를 입력하세요\"\r\n            value={password}\r\n            type=\"password\"\r\n            onChange={inputPassword}\r\n          />\r\n          <AuthButton text=\"로그인\" onClick={onSubmit} />\r\n          <JoinWrapper>\r\n            <span onClick={moveToJoin}>아이디가 없으신가요? 회원가입하기</span>\r\n          </JoinWrapper>\r\n        </form>\r\n      </WrapperDiv>\r\n    </Container>\r\n  );\r\n}\r\n","import axios from 'axios';\r\nimport React, { useCallback, useMemo } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nconst Button = styled.button<{ isFollow: boolean }>`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  align-self: center;\r\n  width: 94px;\r\n  height: 36px;\r\n  border-radius: 9999px;\r\n  box-sizing: border-box;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  font-size: 1.2rem;\r\n  font-weight: 600;\r\n  background-color: ${(props) => (props.isFollow ? '#fff' : '#000')};\r\n  color: ${(props) => (props.isFollow ? '#000' : '#fff')};\r\n`;\r\nconst ProfileEditButton = styled.button`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  align-self: center;\r\n  width: 120px;\r\n  height: 36px;\r\n  border-radius: 9999px;\r\n  box-sizing: border-box;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  font-size: 1.2rem;\r\n  font-weight: 600;\r\n  background-color: #fff;\r\n  color: #000;\r\n`;\r\n\r\ninterface IFollowButtonProps {\r\n  login_user_id: string;\r\n  target_user_id: string;\r\n  follower: string[];\r\n  isLoginedUserProfile?: boolean;\r\n}\r\n\r\nexport default function FollowButton({\r\n  login_user_id,\r\n  target_user_id,\r\n  follower,\r\n  isLoginedUserProfile,\r\n}: IFollowButtonProps) {\r\n  const history = useHistory();\r\n  const isFollow = useMemo(() => {\r\n    console.log('대상 사용자의 팔로워: ', follower);\r\n    if (follower && follower.includes(login_user_id)) {\r\n      return true;\r\n    } else return false;\r\n  }, [follower, login_user_id]);\r\n  const onClickFollowButton = useCallback(\r\n    async (e: React.MouseEvent<HTMLElement>) => {\r\n      e.preventDefault();\r\n      try {\r\n        const apiUrl = isFollow ? 'unfollow-user' : 'follow-user';\r\n\r\n        await axios.patch(`/user/${apiUrl}`, { target_user_id });\r\n        history.go(0);\r\n        return;\r\n      } catch (error: any) {\r\n        console.log('에러', error?.response?.status, error?.response);\r\n\r\n        return;\r\n      }\r\n    },\r\n    [history, isFollow, target_user_id]\r\n  );\r\n  const moveToEditPage = useCallback(\r\n    (e: React.MouseEvent<HTMLElement>) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      history.push('/setting');\r\n    },\r\n    [history]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {isLoginedUserProfile ? (\r\n        <ProfileEditButton onClick={moveToEditPage}>\r\n          <span>프로필 수정</span>\r\n        </ProfileEditButton>\r\n      ) : (\r\n        <Button isFollow={isFollow} onClick={onClickFollowButton}>\r\n          {isFollow ? '팔로잉' : '팔로우'}\r\n        </Button>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport FollowButton from '../../components/Buttons/FollowButton';\r\nimport ProfileImage from '../../components/ProfileImage';\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  min-height: 200px;\r\n  box-sizing: border-box;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n  padding-top: 12px;\r\n  margin-bottom: 16px;\r\n`;\r\nconst ProfileWrapper = styled.div`\r\n  position: relative;\r\n  .profile-user-name {\r\n    font-weight: bold;\r\n  }\r\n  .profile-user-id {\r\n    color: rgb(83, 100, 113);\r\n  }\r\n`;\r\nconst DescriptionWrapper = styled.div`\r\n  margin-top: 10px;\r\n  margin-bottom: 10px;\r\n  span {\r\n    font-size: 1.1rem;\r\n  }\r\n`;\r\nconst FollowButtonWrapper = styled.div`\r\n  position: absolute;\r\n  bottom: 10%;\r\n  right: 0;\r\n`;\r\n\r\nconst FollowCountWrapper = styled.div`\r\n  width: 100%;\r\n  height: 48px;\r\n`;\r\nconst CountArea = styled.div`\r\n  display: inline-block;\r\n  .count {\r\n    font-weight: bold;\r\n  }\r\n  .count-text {\r\n    margin-left: 3px;\r\n  }\r\n`;\r\n\r\ninterface IUserProfileProps {\r\n  login_user_id: string;\r\n  user_id: string;\r\n  name: string;\r\n  profile_color: string;\r\n  description: string;\r\n  following?: string[];\r\n  follower: string[];\r\n  follower_count: number;\r\n  following_count: number;\r\n  isLoginedUserProfile?: boolean;\r\n}\r\nexport default function UserProfile({\r\n  login_user_id,\r\n  user_id,\r\n  name,\r\n  profile_color,\r\n  description,\r\n  follower,\r\n  follower_count,\r\n  following_count,\r\n  isLoginedUserProfile,\r\n}: IUserProfileProps) {\r\n  return (\r\n    <Container>\r\n      <ProfileWrapper>\r\n        <>\r\n          <ProfileImage size=\"big\" color={profile_color} />\r\n          <div style={{ marginTop: 10 }}>\r\n            <span className=\"profile-user-name\">{name}</span>\r\n          </div>\r\n          <div>\r\n            <span className=\"profile-user-id\">{`@${user_id}`}</span>\r\n          </div>\r\n        </>\r\n        <FollowButtonWrapper>\r\n          <FollowButton\r\n            target_user_id={user_id}\r\n            isLoginedUserProfile={isLoginedUserProfile}\r\n            follower={follower}\r\n            login_user_id={login_user_id}\r\n          />\r\n        </FollowButtonWrapper>\r\n      </ProfileWrapper>\r\n      <DescriptionWrapper>\r\n        <span>{description}</span>\r\n      </DescriptionWrapper>\r\n      <FollowCountWrapper>\r\n        {following_count > 0 && (\r\n          <CountArea className=\"count-area\">\r\n            <span className=\"count\">{following_count}</span>\r\n            <span className=\"count-text\">팔로우 중</span>\r\n          </CountArea>\r\n        )}\r\n        {follower_count > 0 && (\r\n          <CountArea className=\"count-area\" style={{ marginLeft: 10 }}>\r\n            <span className=\"count\">{follower_count}</span>\r\n            <span className=\"count-text\">팔로워</span>\r\n          </CountArea>\r\n        )}\r\n      </FollowCountWrapper>\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { ITweet, IUser } from '../../types';\r\nimport { useAuthContext } from '../../context/AuthContext';\r\nimport TweetList from '../../components/Tweet/TweetList';\r\nimport Header from '../../components/Header/Header';\r\nimport UserProfile from './UserProfile';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport default function User() {\r\n  const params: { userid: string } = useParams();\r\n  const [userInfo, setUserInfo] = useState<IUser>({\r\n    user_id: '',\r\n    name: '',\r\n    profile_color: '',\r\n    description: '',\r\n    follower: [],\r\n    following: [],\r\n    follower_count: 0,\r\n    following_count: 0,\r\n  });\r\n  const [tweetList, setTweetList] = useState<ITweet[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  // @ts-ignore\r\n  const [authStore, authDispatch] = useAuthContext();\r\n\r\n  const getUserTimeLine = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(`/reading/timeline/${params.userid}`);\r\n      console.log('결과::', response.data);\r\n      setTweetList(response.data?.timeLine);\r\n      setUserInfo(response.data?.user);\r\n      setLoading(false);\r\n      return;\r\n    } catch (error) {\r\n      console.log('에러');\r\n      return;\r\n    }\r\n  }, [params.userid]);\r\n\r\n  useEffect(() => {\r\n    getUserTimeLine();\r\n  }, [getUserTimeLine]);\r\n\r\n  if (loading) return <></>;\r\n\r\n  return (\r\n    <Container>\r\n      <Header isLogin={authStore?.isLogin} />\r\n      <UserProfile\r\n        login_user_id={authStore?.user?.user_id}\r\n        user_id={userInfo.user_id}\r\n        name={userInfo.name}\r\n        profile_color={userInfo.profile_color}\r\n        description={userInfo.description}\r\n        following={userInfo.following}\r\n        follower={userInfo.follower}\r\n        follower_count={userInfo.follower_count}\r\n        following_count={userInfo.following_count}\r\n        isLoginedUserProfile={authStore?.user?.user_id === userInfo.user_id}\r\n      />\r\n      {tweetList.length === 0 && <h5>타임라인에 트윗이 없습니다.</h5>}\r\n      <TweetList\r\n        data={tweetList}\r\n        user_id={authStore?.user?.user_id}\r\n        isLogin={authStore?.isLogin}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useAuthContext } from '../../context/AuthContext';\r\n// 메인 화면\r\n// route: '/'\r\n// 역할: 로그인 여부를 확인해서 로그인을 했으면 '/home', 아니면 '/login' 페이지로 이동합니다.\r\nexport default function Main() {\r\n  const history = useHistory();\r\n  // @ts-ignore\r\n  const [authStore, authDispatch] = useAuthContext();\r\n\r\n  useEffect(() => {\r\n    if (authStore.isLogin) {\r\n      history.push('/home');\r\n    } else {\r\n      history.push('/login');\r\n    }\r\n  }, [authStore, history]);\r\n  return <></>;\r\n}\r\n","import React, { useCallback, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { ITweet } from '../../types';\r\nimport ProfileImage from '../ProfileImage';\r\nimport Comment from '../Buttons/Comment';\r\nimport Retweet from '../Buttons/Retweet';\r\nimport Heart from '../Buttons/Heart';\r\nimport Share from '../Buttons/Share';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  z-index: 0;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  box-sizing: border-box;\r\n  padding: 12px 16px;\r\n  border-top: 1px solid rgb(239, 243, 244);\r\n  border-bottom: 1px solid rgb(239, 243, 244);\r\n`;\r\nconst ProfileArea = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  margin-bottom: 10px;\r\n`;\r\nconst UserName = styled.a`\r\n  color: black;\r\n  text-decoration: none;\r\n  font-weight: bold;\r\n`;\r\nconst UserId = styled.span`\r\n  font-size: 0.8rem;\r\n  color: rgb(83, 100, 113);\r\n`;\r\nconst ContentsArea = styled.div`\r\n  position: relative;\r\n  .contents-div {\r\n    font-size: 1.1rem;\r\n    font-weight: 500;\r\n  }\r\n  .time-div {\r\n    font-size: 0.9rem;\r\n    font-weight: 400;\r\n  }\r\n`;\r\n\r\nconst CountsWrapper = styled.div`\r\n  width: 100%;\r\n  height: 48px;\r\n  box-sizing: border-box;\r\n  padding: 12px 16px;\r\n  border-bottom: 1px solid rgb(239, 243, 244);\r\n`;\r\nconst CountArea = styled.div`\r\n  display: inline-block;\r\n  .count {\r\n    font-weight: bold;\r\n  }\r\n  .count-text {\r\n    margin-left: 3px;\r\n  }\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 48px;\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  box-sizing: border-box;\r\n  border-bottom: 1px solid rgb(239, 243, 244);\r\n`;\r\n\r\ninterface ISmallTweetProps {\r\n  value: ITweet;\r\n  user_id: string;\r\n  isLogin: boolean;\r\n}\r\n\r\n//@ts-ignore\r\nexport default function DetailTweet({\r\n  value,\r\n  user_id,\r\n  isLogin,\r\n}: ISmallTweetProps) {\r\n  return (\r\n    <Container>\r\n      <Wrapper>\r\n        <ProfileArea>\r\n          <ProfileImage\r\n            size=\"small\"\r\n            color={value.user.profile_color}\r\n            user_id={value.user.user_id}\r\n          />\r\n          <div className=\"name-id-field\" style={{ marginLeft: 10 }}>\r\n            <div className=\"user_name\">\r\n              <UserName>{value.user.name}</UserName>\r\n            </div>\r\n            <div className=\"user_id\">\r\n              <UserId>{`@${value.user.user_id}`}</UserId>\r\n            </div>\r\n          </div>\r\n        </ProfileArea>\r\n\r\n        <ContentsArea>\r\n          <div className=\"contents-div\" style={{ marginTop: 5 }}>\r\n            <span>{value.contents}</span>\r\n          </div>\r\n          <div className=\"time-div\" style={{ marginTop: 5 }}>\r\n            <span>{value.create_date}</span>\r\n          </div>\r\n        </ContentsArea>\r\n      </Wrapper>\r\n\r\n      <CountsWrapper>\r\n        {value.retweet_count === 0 && value.like_count === 0 && (\r\n          <p>트윗 활동이 없습니다.</p>\r\n        )}\r\n        {value.retweet_count > 0 && (\r\n          <CountArea className=\"count-area\">\r\n            <span className=\"count\">{value.retweet_count}</span>\r\n            <span className=\"count-text\">리트윗</span>\r\n          </CountArea>\r\n        )}\r\n        {value.like_count > 0 && (\r\n          <CountArea className=\"count-area\" style={{ marginLeft: 10 }}>\r\n            <span className=\"count\">{value.like_count}</span>\r\n            <span className=\"count-text\">마음에 들어요</span>\r\n          </CountArea>\r\n        )}\r\n      </CountsWrapper>\r\n\r\n      <ButtonWrapper>\r\n        <Comment comments={value.comments} showCount={false} />\r\n        <Retweet\r\n          retweet={value.retweet}\r\n          user_id={user_id}\r\n          isLogin={isLogin}\r\n          showCount={false}\r\n        />\r\n        <Heart\r\n          like={value.like}\r\n          user_id={user_id}\r\n          isLogin={isLogin}\r\n          showCount={false}\r\n        />\r\n        <Share />\r\n      </ButtonWrapper>\r\n    </Container>\r\n  );\r\n}\r\n","import axios from 'axios';\r\nimport React, { useCallback, useState } from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport styled from 'styled-components';\r\nimport ProfileImage from '../../components/ProfileImage';\r\nimport createRandomTweetId from '../../util/createRandomTweetId';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n`;\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  min-height: 100px;\r\n  display: flex;\r\n  align-items: center;\r\n  box-sizing: border-box;\r\n  padding: 12px 16px;\r\n  border-top: 1px solid rgb(239, 243, 244);\r\n  border-bottom: 1px solid rgb(239, 243, 244);\r\n`;\r\nconst ContentsArea = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: end;\r\n  width: 100%;\r\n  margin-left: 10px;\r\n`;\r\nconst Input = styled.input`\r\n  width: 100%;\r\n  max-width: 510px;\r\n  height: 52px;\r\n  border: 0;\r\n  min-height: 28px;\r\n  box-sizing: border-box;\r\n  padding-left: 16px;\r\n  font-size: 18px;\r\n  &&:focus {\r\n    outline: none;\r\n  }\r\n`;\r\nconst SubmitButton = styled(Button)`\r\n  width: 94px;\r\n  height: 36px;\r\n  background-color: rgb(29, 155, 240);\r\n  border-radius: 20px;\r\n  border: 0;\r\n\r\n  p {\r\n    color: #fff;\r\n    font-weight: bold;\r\n  }\r\n`;\r\ninterface IAddCommentProp {\r\n  profile_color: string;\r\n  target_tweet_id: number;\r\n  refreshComment: () => void;\r\n}\r\nexport default function AddComment({\r\n  profile_color,\r\n  target_tweet_id,\r\n  refreshComment,\r\n}: IAddCommentProp) {\r\n  const [contents, setContents] = useState('');\r\n\r\n  const inputContents = useCallback(\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setContents(e.target.value);\r\n    },\r\n    []\r\n  );\r\n\r\n  const onSubmit = useCallback(async () => {\r\n    try {\r\n      const tweet_id = createRandomTweetId();\r\n      await axios.post('/tweet/add-comment', {\r\n        tweet_id,\r\n        contents,\r\n        target_tweet_id,\r\n      });\r\n      return refreshComment();\r\n    } catch (error) {\r\n      console.log('답글 등록 에러', error);\r\n    }\r\n  }, [contents, refreshComment, target_tweet_id]);\r\n\r\n  return (\r\n    <Container>\r\n      <Wrapper>\r\n        <ProfileImage size=\"small\" color={profile_color} />\r\n        <ContentsArea>\r\n          <Input\r\n            value={contents}\r\n            placeholder=\"내 답글을 트윗합니다.\"\r\n            type=\"text\"\r\n            onChange={inputContents}\r\n            maxLength={140}\r\n          />\r\n          <SubmitButton onClick={onSubmit}>\r\n            <p>답글</p>\r\n          </SubmitButton>\r\n        </ContentsArea>\r\n      </Wrapper>\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport Header from '../../components/Header/Header';\r\nimport { useAuthContext } from '../../context/AuthContext';\r\nimport DetailTweet from '../../components/Tweet/DetailTweet';\r\nimport { ITweet } from '../../types';\r\nimport AddComment from './AddComment';\r\nimport TweetList from '../../components/Tweet/TweetList';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n`;\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  border-left: 1px solid rgb(239, 243, 244);\r\n  border-right: 1px solid rgb(239, 243, 244);\r\n`;\r\n\r\nexport default function Tweet() {\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [errorMessage, setErrorMessage] = useState<string>('');\r\n  const [firstTweet, setFirstTweet] = useState<ITweet>({\r\n    tweet_id: 0,\r\n    user_id: '',\r\n    video: null,\r\n    image: [],\r\n    contents: '',\r\n    create_date: '',\r\n    retweet: [],\r\n    retweet_count: 0,\r\n    like: [],\r\n    like_count: 0,\r\n    comments: [],\r\n    comments_count: 0,\r\n    is_active: false,\r\n    user: {\r\n      name: '',\r\n      user_id: '',\r\n      profile_color: '',\r\n      description: '',\r\n      follower: [],\r\n      following: [],\r\n      follower_count: 0,\r\n      following_count: 0,\r\n    },\r\n  });\r\n  const [comments, setComments] = useState<ITweet[]>([]);\r\n  // @ts-ignore\r\n  const [authStore, authDispatch] = useAuthContext();\r\n  const params: { user: string; tweetid: string } = useParams();\r\n\r\n  const getDetailTweet = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(`/reading/${params.tweetid}`);\r\n      console.log('결과: ', response.data);\r\n      setFirstTweet(response.data.origin);\r\n      setComments(response.data.comments);\r\n\r\n      setLoading(false);\r\n      return;\r\n    } catch (error) {\r\n      console.log('error', error);\r\n      return;\r\n    }\r\n  }, [params.tweetid]);\r\n  const history = useHistory();\r\n  const refreshComment = useCallback(() => {\r\n    // 답글을 작성한 후 실행합니다.\r\n    history.go(0);\r\n    return;\r\n  }, [history]);\r\n\r\n  useEffect(() => {\r\n    getDetailTweet();\r\n  }, [getDetailTweet]);\r\n\r\n  if (loading)\r\n    return (\r\n      <Container>\r\n        <Header isLogin={authStore?.isLogin} />\r\n        <Wrapper>\r\n          <h5 style={{ marginTop: 30 }}>{errorMessage}</h5>\r\n        </Wrapper>\r\n      </Container>\r\n    );\r\n\r\n  return (\r\n    <Container>\r\n      <Header isLogin={authStore?.isLogin} />\r\n      <Wrapper>\r\n        <DetailTweet\r\n          value={firstTweet}\r\n          user_id={authStore?.user?.user_id}\r\n          isLogin={authStore?.isLogin}\r\n        />\r\n        {authStore?.isLogin && (\r\n          <AddComment\r\n            profile_color={authStore?.user?.profile_color}\r\n            target_tweet_id={firstTweet.tweet_id}\r\n            refreshComment={refreshComment}\r\n          />\r\n        )}\r\n        {/* comments 에다 각각 작은트윗 불러오기 */}\r\n        <TweetList\r\n          data={comments}\r\n          user_id={authStore?.user?.user_id}\r\n          isLogin={authStore?.isLogin}\r\n        />\r\n      </Wrapper>\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useCallback, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Route, Switch } from 'react-router-dom';\nimport { useAuthContext } from './context/AuthContext';\nimport Home from './pages/Home';\nimport Join from './pages/Join';\nimport Login from './pages/Login';\nimport User from './pages/User';\nimport Main from './pages/Main';\nimport Tweet from './pages/Tweet';\n\nfunction App() {\n  // @ts-ignore\n  const [, authDispatch] = useAuthContext();\n  const [loading, setLoading] = useState(true);\n\n  const sessionLogin = useCallback(async () => {\n    try {\n      const response = await axios.post('/auth/token-refresh');\n      console.log('토큰 로그인 결과', response.data);\n      authDispatch({ type: 'LOGIN', payload: response.data });\n      setTimeout(() => {\n        setLoading(false);\n      }, 100);\n      return;\n    } catch (error) {\n      setLoading(false);\n      return;\n    }\n  }, [authDispatch]);\n\n  useEffect(() => {\n    sessionLogin();\n  }, [sessionLogin]);\n\n  if (loading) return <></>;\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={Main} exact />\n      <Route path=\"/home\" component={Home} exact />\n      <Route path=\"/login\" component={Login} exact />\n      <Route path=\"/join\" component={Join} exact />\n      <Route path=\"/:userid\" component={User} exact />\n      <Route path=\"/:user/status/:tweetid\" component={Tweet} exact />\n    </Switch>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { AuthProvider } from './context/AuthContext';\n\naxios.defaults.withCredentials = true;\naxios.defaults.baseURL = 'http://localhost:80/api';\n// axios.defaults.baseURL = 'http://localhost:5000/api';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <AuthProvider>\n        <App />\n      </AuthProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}