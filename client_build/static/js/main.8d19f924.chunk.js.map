{"version":3,"sources":["context/AuthContext.tsx","components/ProfileImage.tsx","components/Buttons/Comment.tsx","components/Buttons/Retweet.tsx","components/Buttons/Heart.tsx","components/Buttons/Share.tsx","components/Tweet/SmallTweet.tsx","components/Tweet/TweetList.tsx","util/createRandomTweetId.ts","pages/Home/AddTweet.tsx","components/Header/JoinButton.tsx","components/Header/LoginButton.tsx","components/Header/LogoutButton.tsx","components/Header/Header.tsx","pages/Home/index.tsx","assets/Logo blue.svg","components/AuthButton.tsx","components/AuthInput.tsx","components/Buttons/EditProfile.tsx","pages/Join/index.tsx","pages/Login/index.tsx","components/Buttons/FollowButton.tsx","pages/User/UserProfile.tsx","pages/User/index.tsx","pages/Main/index.tsx","components/Tweet/DetailTweet.tsx","pages/Tweet/AddComment.tsx","pages/Tweet/index.tsx","pages/Setting/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initialState","isLogin","user","user_id","name","profile_color","description","AuthContext","createContext","AuthDispatchContext","useAuthContext","context","useContext","Error","useAuthDispatchContext","authReducer","prevState","action","type","payload","follower","following","console","log","AuthProvider","children","useReducer","store","authDispath","Provider","value","Container","styled","div","Profile","props","size","css","color","ProfileImage","history","useHistory","moveToUserTimeLine","useCallback","e","preventDefault","stopPropagation","push","onClick","Icon","FontAwesomeIcon","CountWrapper","Comment","comments","showCount","comments_count","useMemo","length","icon","faComment","IconButton","button","Retweet","retweet","tweet_id","onChangeTimeLine","isActive","includes","retweet_count","onChangeRetweet","a","alert","axios","delete","post","response","data","status","headers","faRetweet","Heart","like","like_count","onChangeLike","activeHeart","nonActiveHeart","Share","onCopyUrl","navigator","clipboard","writeText","window","location","href","toast","position","POSITION","BOTTOM_CENTER","faExternalLinkAlt","Wrapper","ContentsArea","UserName","span","UserId","ButtonWrapper","SmallTweet","moveToDetailPage","className","style","display","marginRight","marginTop","contents","TweetList","map","idx","createRandomTweetId","time","Date","getTime","randomNumber","Math","floor","random","parseInt","Input","input","SubmitButton","Button","AddTweet","useState","setContents","inputContents","target","onSubmit","placeholder","onChange","maxLength","JoinButton","moveToPage","LoginButton","LogoutButton","authDispatch","onStartLogout","Header","marginLeft","getKey","pageIndex","prevPageData","Home","authStore","useSWRInfinite","url","get","then","res","setSize","mutate","error","tweets","concat","useEffect","onScroll","innerHeight","scrollY","document","body","offsetHeight","addEventListener","removeEventListener","AuthButton","text","AuthInput","labelText","Label","for","md","ProfileButton","EditProfile","onChangeColor","showModal","setShowModal","onToggleModal","prev","onSelectColorAndCloseModal","hex","Modal","isOpen","toggle","ModalHeader","ModalBody","onChangeComplete","WrapperDiv","LogoSvg","img","Join","profileColor","setProfileColor","userId","setUserId","setName","email","setEmail","password","setPassword","onChangeUserId","onChangeName","onChangeEmail","onChangePassword","src","logo","JoinWrapper","Login","seEmail","loading","setLoading","moveToJoin","isFollow","ProfileEditButton","FollowButton","login_user_id","target_user_id","isLoginedUserProfile","onChangeStatus","onChangeFollowStatus","patch","moveToEditPage","ProfileWrapper","DescriptionWrapper","FollowButtonWrapper","FollowCountWrapper","CountArea","UserProfile","follower_count","following_count","User","params","useParams","useSWRConfig","useSWR","userid","timeLine","Main","ProfileArea","CountsWrapper","DetailTweet","onChangeTweet","create_date","AddComment","target_tweet_id","Tweet","tweetid","origin","Setting","dispatch","setDescription","onChangeDescription","App","sessionLogin","setTimeout","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","defaults","withCredentials","baseURL","ReactDOM","render","StrictMode","hideProgressBar","getElementById"],"mappings":"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","file":"static/js/main.8d19f924.chunk.js","sourcesContent":["import React, { createContext, useReducer, useContext, Dispatch } from 'react';\r\n\r\ntype User = {\r\n  user_id: string;\r\n  name: string;\r\n  profile_color: string;\r\n  description: string;\r\n};\r\n\r\ntype State = {\r\n  isLogin: boolean;\r\n  user: User;\r\n};\r\nconst initialState: State = {\r\n  isLogin: false,\r\n  user: {\r\n    user_id: '',\r\n    name: '',\r\n    profile_color: '#17517e',\r\n    description: '',\r\n  },\r\n};\r\n\r\nexport const AuthContext = createContext<State>(initialState);\r\n\r\ntype Action =\r\n  | { type: 'LOGIN'; payload: User }\r\n  | { type: 'LOGOUT' }\r\n  | {\r\n      type: 'CHANGE_PROFILE';\r\n      payload: { name: string; profile_color: string; description: string };\r\n    };\r\ntype DispatchType = Dispatch<Action>;\r\n\r\nexport const AuthDispatchContext = createContext<DispatchType | null>(null);\r\n\r\nexport function useAuthContext() {\r\n  const context = useContext(AuthContext);\r\n  if (!context) throw new Error('AuthContext 없음.');\r\n  return context;\r\n}\r\nexport function useAuthDispatchContext() {\r\n  const context = useContext(AuthDispatchContext);\r\n  if (!context) throw new Error('AuthDispatchContext 없음.');\r\n  return context;\r\n}\r\n\r\nconst authReducer = (prevState: State, action: Action) => {\r\n  switch (action.type) {\r\n    case 'LOGIN': {\r\n      return {\r\n        isLogin: true,\r\n        user: action.payload,\r\n      };\r\n    }\r\n    case 'CHANGE_PROFILE': {\r\n      return {\r\n        ...prevState,\r\n        user: {\r\n          ...prevState.user,\r\n          name: action.payload.name,\r\n          description: action.payload.description,\r\n          profile_color: action.payload.profile_color,\r\n        },\r\n      };\r\n    }\r\n    case 'LOGOUT': {\r\n      return {\r\n        isLogin: false,\r\n        user: {\r\n          user_id: '',\r\n          name: '',\r\n          follower: [],\r\n          following: [],\r\n          profile_color: '#17517e',\r\n          description: '',\r\n        },\r\n      };\r\n    }\r\n    default: {\r\n      console.log('context 에러');\r\n      return prevState;\r\n    }\r\n  }\r\n};\r\n\r\nexport function AuthProvider({ children }: { children: React.ReactChild[] }) {\r\n  const [store, authDispath] = useReducer(authReducer, initialState);\r\n  return (\r\n    <AuthContext.Provider value={store}>\r\n      <AuthDispatchContext.Provider value={authDispath}>\r\n        {children}\r\n      </AuthDispatchContext.Provider>\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n","import React, { useCallback } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled, { css } from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  z-index: 1;\r\n  cursor: pointer;\r\n`;\r\n\r\ninterface IProfileImageProps {\r\n  size: 'big' | 'middle' | 'small';\r\n  color: string;\r\n  user_id?: string;\r\n}\r\n\r\nconst Profile = styled.div<IProfileImageProps>`\r\n  ${(props) =>\r\n    props.size === 'big'\r\n      ? css`\r\n          width: 135px;\r\n          height: 135px;\r\n        `\r\n      : props.size === 'middle'\r\n      ? css`\r\n          width: 64px;\r\n          height: 64px;\r\n        `\r\n      : css`\r\n          width: 48px;\r\n          height: 48px;\r\n        `}\r\n  border-radius: 50%;\r\n  border: 1px solid #dfdfdf;\r\n  background-color: ${(props) => props.color};\r\n`;\r\n\r\n// @ts-ignore\r\nexport default function ProfileImage({\r\n  size,\r\n  color,\r\n  user_id,\r\n}: IProfileImageProps) {\r\n  const history = useHistory();\r\n  const moveToUserTimeLine = useCallback(\r\n    (e: React.MouseEvent<HTMLElement>) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      // AddTweet, AddComment 에서는 이동하지 않도록 막기 위해서 조건문을 추가했습니다.\r\n      if (user_id) {\r\n        history.push(`/${user_id}`);\r\n        return;\r\n      } else return;\r\n    },\r\n    [history, user_id]\r\n  );\r\n  return (\r\n    <Container onClick={moveToUserTimeLine}>\r\n      <Profile size={size} color={color} />\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faComment } from '@fortawesome/free-regular-svg-icons';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  z-index: 1;\r\n  text-align: center;\r\n`;\r\n\r\nconst Icon = styled(FontAwesomeIcon)`\r\n  font-size: 1rem;\r\n`;\r\n\r\nconst CountWrapper = styled.div`\r\n  display: inline-block;\r\n  margin-left: 5px;\r\n  span {\r\n    font-size: 0.8rem;\r\n  }\r\n`;\r\n\r\ninterface IComment {\r\n  comments: string[];\r\n  showCount: boolean;\r\n}\r\n\r\nexport default function Comment({ comments, showCount }: IComment) {\r\n  const comments_count = useMemo(() => {\r\n    if (comments) return comments.length;\r\n    else return 0;\r\n  }, [comments]);\r\n\r\n  return (\r\n    <Container>\r\n      <Icon icon={faComment} />\r\n      {showCount && (\r\n        <CountWrapper>\r\n          {comments_count > 0 ? <span>{comments_count}</span> : <></>}\r\n        </CountWrapper>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useCallback, useMemo } from 'react';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faRetweet } from '@fortawesome/free-solid-svg-icons';\r\nimport axios from 'axios';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  z-index: 1;\r\n  text-align: center;\r\n  cursor: pointer;\r\n`;\r\nconst IconButton = styled.button`\r\n  width: 30%;\r\n  margin: 0 auto;\r\n  border: none;\r\n  border-radius: 9999px;\r\n  background-color: transparent;\r\n  &:hover {\r\n    background-color: rgba(0, 186, 124, 0.1);\r\n  }\r\n`;\r\nconst Icon = styled(FontAwesomeIcon)`\r\n  font-size: 1rem;\r\n`;\r\n\r\nconst CountWrapper = styled.div`\r\n  display: inline-block;\r\n  margin-left: 5px;\r\n  span {\r\n    font-size: 0.8rem;\r\n  }\r\n`;\r\n\r\ninterface IRetweet {\r\n  user_id: string;\r\n  retweet: string[];\r\n  isLogin: boolean;\r\n  showCount: boolean;\r\n  tweet_id?: number;\r\n  onChangeTimeLine?: any;\r\n}\r\n\r\nexport default function Retweet({\r\n  user_id,\r\n  retweet,\r\n  isLogin,\r\n  showCount,\r\n  tweet_id,\r\n  onChangeTimeLine,\r\n}: IRetweet) {\r\n  const isActive = useMemo(() => {\r\n    if (retweet) {\r\n      if (retweet.includes(user_id)) {\r\n        return true;\r\n      } else return false;\r\n    } else return false;\r\n  }, [user_id, retweet]);\r\n  const retweet_count = useMemo(() => {\r\n    if (retweet) return retweet.length;\r\n    else return 0;\r\n  }, [retweet]);\r\n\r\n  const onChangeRetweet = useCallback(\r\n    async (e: React.MouseEvent<HTMLElement>) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      if (!isLogin) {\r\n        alert('로그인 후 이용할 수 있습니다.');\r\n        return;\r\n      }\r\n      try {\r\n        if (isActive) await axios.delete(`/tweets/retweet/${tweet_id}`);\r\n        else await axios.post('/tweets/retweet', { tweet_id });\r\n\r\n        onChangeTimeLine();\r\n        return;\r\n      } catch (error: any) {\r\n        console.log(error);\r\n        console.log(error?.response?.data);\r\n        console.log(error?.response?.status);\r\n        console.log(error?.response?.headers);\r\n        alert(error?.response?.data);\r\n        return;\r\n      }\r\n    },\r\n    [isActive, isLogin, onChangeTimeLine, tweet_id]\r\n  );\r\n\r\n  return (\r\n    <Container>\r\n      <IconButton onClick={onChangeRetweet}>\r\n        <Icon color={isActive ? 'green' : 'black'} icon={faRetweet} />\r\n      </IconButton>\r\n\r\n      {showCount && (\r\n        <CountWrapper>\r\n          {retweet_count > 0 ? <span>{retweet_count}</span> : <></>}\r\n        </CountWrapper>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useCallback, useMemo } from 'react';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHeart as activeHeart } from '@fortawesome/free-solid-svg-icons';\r\nimport { faHeart as nonActiveHeart } from '@fortawesome/free-regular-svg-icons';\r\nimport axios from 'axios';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  z-index: 1;\r\n  text-align: center;\r\n  cursor: pointer;\r\n`;\r\nconst IconButton = styled.button`\r\n  width: 30%;\r\n  margin: 0 auto;\r\n  border: none;\r\n  border-radius: 9999px;\r\n  background-color: transparent;\r\n  &:hover {\r\n    background-color: rgba(249, 24, 128, 0.1);\r\n  }\r\n`;\r\nconst Icon = styled(FontAwesomeIcon)`\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst CountWrapper = styled.div`\r\n  display: inline-block;\r\n  margin-left: 5px;\r\n  span {\r\n    font-size: 0.8rem;\r\n  }\r\n`;\r\n\r\ninterface IHeartProps {\r\n  user_id: string;\r\n  like: string[];\r\n  isLogin: boolean;\r\n  showCount: boolean;\r\n  tweet_id?: number;\r\n  onChangeTimeLine?: any;\r\n}\r\n\r\nexport default function Heart({\r\n  user_id,\r\n  like,\r\n  isLogin,\r\n  tweet_id,\r\n  showCount,\r\n  onChangeTimeLine,\r\n}: IHeartProps) {\r\n  const isActive = useMemo(() => {\r\n    if (like) {\r\n      if (like.includes(user_id)) {\r\n        return true;\r\n      } else return false;\r\n    } else return false;\r\n  }, [user_id, like]);\r\n  const like_count = useMemo(() => {\r\n    if (like) return like.length;\r\n    else return 0;\r\n  }, [like]);\r\n\r\n  const onChangeLike = useCallback(\r\n    async (e: React.MouseEvent<HTMLElement>) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      if (!isLogin) {\r\n        alert('로그인 후 이용할 수 있습니다.');\r\n        return;\r\n      }\r\n      try {\r\n        if (isActive) await axios.delete(`/tweets/like/${tweet_id}`);\r\n        else await axios.post('/tweets/like', { tweet_id });\r\n\r\n        onChangeTimeLine();\r\n        return;\r\n      } catch (error: any) {\r\n        console.log(error);\r\n        console.log(error?.response?.data);\r\n        console.log(error?.response?.status);\r\n        console.log(error?.response?.headers);\r\n        alert(error?.response?.data);\r\n        return;\r\n      }\r\n    },\r\n    [isActive, isLogin, onChangeTimeLine, tweet_id]\r\n  );\r\n\r\n  return (\r\n    <Container>\r\n      <IconButton onClick={onChangeLike}>\r\n        <Icon\r\n          color={isActive ? '#f91880' : 'black'}\r\n          icon={isActive ? activeHeart : nonActiveHeart}\r\n        />\r\n      </IconButton>\r\n\r\n      {showCount && (\r\n        <CountWrapper>\r\n          {like_count > 0 ? <span>{like_count}</span> : <></>}\r\n        </CountWrapper>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport { toast } from 'react-toastify';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faExternalLinkAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  z-index: 1;\r\n  text-align: center;\r\n  cursor: pointer;\r\n`;\r\nconst IconButton = styled.button`\r\n  width: 30%;\r\n  margin: 0 auto;\r\n  border: none;\r\n  border-radius: 9999px;\r\n  background-color: transparent;\r\n  &:hover {\r\n    background-color: rgba(29, 155, 240, 0.1);\r\n  }\r\n`;\r\n\r\nconst Icon = styled(FontAwesomeIcon)`\r\n  font-size: 1rem;\r\n`;\r\n\r\nexport default function Share() {\r\n  const onCopyUrl = useCallback((e: React.MouseEvent<HTMLElement>) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    // 출처: https://stackoverflow.com/a/52033479\r\n    navigator.clipboard.writeText(window.location.href);\r\n    toast('링크를 클립보드에 복사했습니다.', {\r\n      position: toast.POSITION.BOTTOM_CENTER,\r\n    });\r\n    return;\r\n  }, []);\r\n  return (\r\n    <Container>\r\n      <IconButton onClick={onCopyUrl}>\r\n        <Icon icon={faExternalLinkAlt} />\r\n      </IconButton>\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useCallback, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { ITweet } from '../../types';\r\nimport ProfileImage from '../ProfileImage';\r\nimport Comment from '../Buttons/Comment';\r\nimport Retweet from '../Buttons/Retweet';\r\nimport Heart from '../Buttons/Heart';\r\nimport Share from '../Buttons/Share';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  min-height: 100px;\r\n  z-index: 0;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  min-height: 100px;\r\n  display: flex;\r\n  align-items: center;\r\n  box-sizing: border-box;\r\n  padding: 12px 16px;\r\n  border-top: 1px solid rgb(239, 243, 244);\r\n  border-bottom: 1px solid rgb(239, 243, 244);\r\n`;\r\n\r\nconst ContentsArea = styled.div`\r\n  position: relative;\r\n  margin-left: 10px;\r\n`;\r\nconst UserName = styled.span`\r\n  color: black;\r\n  font-weight: bold;\r\n`;\r\nconst UserId = styled.span`\r\n  color: rgb(83, 100, 113);\r\n`;\r\nconst ButtonWrapper = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 48px;\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  box-sizing: border-box;\r\n  padding: 0px 70px;\r\n  border-bottom: 1px solid rgb(239, 243, 244);\r\n`;\r\n\r\ninterface ISmallTweetProps {\r\n  value: ITweet;\r\n  user_id: string;\r\n  isLogin: boolean;\r\n  onChangeTimeLine?: any;\r\n}\r\n\r\n//@ts-ignore\r\nexport default function SmallTweet({\r\n  value,\r\n  user_id,\r\n  isLogin,\r\n  onChangeTimeLine,\r\n}: ISmallTweetProps) {\r\n  const history = useHistory();\r\n  const moveToDetailPage = useCallback(() => {\r\n    history.push(`/${value.user_id}/status/${value.tweet_id}`);\r\n    return;\r\n  }, [history, value]);\r\n  return (\r\n    <Container onClick={moveToDetailPage}>\r\n      <Wrapper>\r\n        {/* // @ts-ignore */}\r\n        <ProfileImage\r\n          size=\"small\"\r\n          color={value?.user?.profile_color}\r\n          user_id={value?.user?.user_id}\r\n        />\r\n        <ContentsArea>\r\n          <div\r\n            className=\"user_name\"\r\n            style={{ display: 'inline-block', marginRight: 3 }}\r\n          >\r\n            <UserName>{value?.user?.name}</UserName>\r\n          </div>\r\n          <div className=\"user_id\" style={{ display: 'inline-block' }}>\r\n            <UserId>{`@${value?.user?.user_id}`}</UserId>\r\n          </div>\r\n          <div className=\"contents\" style={{ marginTop: 5 }}>\r\n            <span>{value?.contents}</span>\r\n          </div>\r\n        </ContentsArea>\r\n      </Wrapper>\r\n      <ButtonWrapper>\r\n        <Comment comments={value?.comments} showCount={true} />\r\n        <Retweet\r\n          retweet={value?.retweet}\r\n          user_id={user_id}\r\n          isLogin={isLogin}\r\n          showCount={true}\r\n          tweet_id={value?.tweet_id}\r\n          onChangeTimeLine={onChangeTimeLine}\r\n        />\r\n        <Heart\r\n          like={value?.like}\r\n          user_id={user_id}\r\n          isLogin={isLogin}\r\n          showCount={true}\r\n          tweet_id={value?.tweet_id}\r\n          onChangeTimeLine={onChangeTimeLine}\r\n        />\r\n        <Share />\r\n      </ButtonWrapper>\r\n    </Container>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { ITweet } from '../../types';\r\nimport SmallTweet from './SmallTweet';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  border-left: 1px solid rgb(239, 243, 244);\r\n  border-right: 1px solid rgb(239, 243, 244);\r\n`;\r\n\r\ninterface ITweetList {\r\n  data: ITweet[];\r\n  user_id: string;\r\n  isLogin: boolean;\r\n  onChangeTimeLine?: any;\r\n}\r\n//@ts-ignore {/* @ts-ignore */}\r\nexport default function TweetList({\r\n  data,\r\n  user_id,\r\n  isLogin,\r\n  onChangeTimeLine,\r\n}: ITweetList) {\r\n  if (!data) return <Container></Container>;\r\n  return (\r\n    <Container>\r\n      {data.map((value, idx) => (\r\n        <div key={idx}>\r\n          <SmallTweet\r\n            value={value}\r\n            user_id={user_id}\r\n            isLogin={isLogin}\r\n            onChangeTimeLine={onChangeTimeLine}\r\n          />\r\n        </div>\r\n      ))}\r\n    </Container>\r\n  );\r\n}\r\n","const createRandomTweetId = () => {\r\n  const time: number = new Date().getTime();\r\n  // 출처: https://stackoverflow.com/a/21816629\r\n  const randomNumber: number = Math.floor(Math.random() * 899999 + 100000);\r\n  return parseInt(`${time}${randomNumber}`);\r\n};\r\n\r\nexport default createRandomTweetId;\r\n","import axios from 'axios';\r\nimport React, { useCallback, useState } from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport styled from 'styled-components';\r\nimport ProfileImage from '../../components/ProfileImage';\r\nimport createRandomTweetId from '../../util/createRandomTweetId';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n`;\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  min-height: 100px;\r\n  display: flex;\r\n  align-items: center;\r\n  box-sizing: border-box;\r\n  padding: 12px 16px;\r\n  border-top: 1px solid rgb(239, 243, 244);\r\n  border-bottom: 1px solid rgb(239, 243, 244);\r\n`;\r\nconst ContentsArea = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: end;\r\n  width: 100%;\r\n  margin-left: 10px;\r\n`;\r\nconst Input = styled.input`\r\n  width: 100%;\r\n  max-width: 510px;\r\n  height: 52px;\r\n  border: 0;\r\n  min-height: 28px;\r\n  box-sizing: border-box;\r\n  padding-left: 16px;\r\n  font-size: 18px;\r\n  &&:focus {\r\n    outline: none;\r\n  }\r\n`;\r\nconst SubmitButton = styled(Button)`\r\n  width: 94px;\r\n  height: 36px;\r\n  background-color: rgb(29, 155, 240);\r\n  border-radius: 20px;\r\n  border: 0;\r\n\r\n  p {\r\n    color: #fff;\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\nexport default function AddTweet({\r\n  profile_color,\r\n  onChangeTimeLine,\r\n}: {\r\n  profile_color: string;\r\n  onChangeTimeLine: any;\r\n}) {\r\n  const [contents, setContents] = useState('');\r\n\r\n  const inputContents = useCallback(\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setContents(e.target.value);\r\n    },\r\n    []\r\n  );\r\n  const onSubmit = useCallback(async () => {\r\n    try {\r\n      const tweet_id = createRandomTweetId();\r\n      await axios.post('/tweets', { tweet_id, contents });\r\n      onChangeTimeLine();\r\n      setContents('');\r\n      return;\r\n    } catch (error: any) {\r\n      console.log(error.response.data);\r\n      console.log(error.response.status);\r\n      console.log(error.response.headers);\r\n      alert(error.response.data);\r\n      return;\r\n    }\r\n  }, [contents, onChangeTimeLine]);\r\n\r\n  return (\r\n    <Container>\r\n      <Wrapper>\r\n        <ProfileImage size=\"small\" color={profile_color} />\r\n        <ContentsArea>\r\n          <Input\r\n            value={contents}\r\n            placeholder=\"무슨 일이 일어나고 있나요?\"\r\n            type=\"text\"\r\n            onChange={inputContents}\r\n            maxLength={140}\r\n          />\r\n          <SubmitButton onClick={onSubmit}>\r\n            <p>트윗하기</p>\r\n          </SubmitButton>\r\n        </ContentsArea>\r\n      </Wrapper>\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useCallback } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  background-color: rgb(29, 155, 240);\r\n  align-self: center;\r\n  width: 91px;\r\n  height: 30px;\r\n  border-radius: 10px;\r\n  box-sizing: border-box;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  color: #ffffff;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 1rem;\r\n  font-weight: 600;\r\n`;\r\n\r\nexport default function JoinButton() {\r\n  const history = useHistory();\r\n  const moveToPage = useCallback(() => {\r\n    return history.push('/join');\r\n  }, [history]);\r\n\r\n  return (\r\n    <Button onClick={moveToPage}>\r\n      <span>회원가입</span>\r\n    </Button>\r\n  );\r\n}\r\n","import React, { useCallback } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  background-color: rgb(29, 155, 240);\r\n  align-self: center;\r\n  width: 91px;\r\n  height: 30px;\r\n  border-radius: 10px;\r\n  box-sizing: border-box;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  color: #ffffff;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 1rem;\r\n  font-weight: 600;\r\n`;\r\n\r\nexport default function LoginButton() {\r\n  const history = useHistory();\r\n\r\n  const moveToPage = useCallback(() => {\r\n    return history.push('/login');\r\n  }, [history]);\r\n\r\n  return (\r\n    <Button onClick={moveToPage}>\r\n      <span>로그인</span>\r\n    </Button>\r\n  );\r\n}\r\n","import React, { useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { useAuthDispatchContext } from '../../context/AuthContext';\r\n\r\nconst Button = styled.button`\r\n  background-color: rgb(29, 155, 240);\r\n  align-self: center;\r\n  width: 91px;\r\n  height: 30px;\r\n  border-radius: 10px;\r\n  box-sizing: border-box;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  color: #ffffff;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 1rem;\r\n  font-weight: 600;\r\n`;\r\n\r\nexport default function LogoutButton() {\r\n  const history = useHistory();\r\n  const authDispatch = useAuthDispatchContext();\r\n\r\n  const onStartLogout = useCallback(async () => {\r\n    try {\r\n      const response = await axios.post('/auth/logout');\r\n      console.log('로그아웃 결과', response.data);\r\n      authDispatch({ type: 'LOGOUT' });\r\n      history.push('/login');\r\n      return;\r\n    } catch (error) {\r\n      console.log('에러', error);\r\n      return;\r\n    }\r\n  }, [authDispatch, history]);\r\n\r\n  return (\r\n    <Button onClick={onStartLogout}>\r\n      <span>로그아웃</span>\r\n    </Button>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport JoinButton from './JoinButton';\r\nimport LoginButton from './LoginButton';\r\nimport LogoutButton from './LogoutButton';\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: end;\r\n  align-items: center;\r\n  box-sizing: border-box;\r\n  padding: 10px 0;\r\n`;\r\n\r\nexport default function Header({ isLogin }: { isLogin: boolean }) {\r\n  return (\r\n    <Container>\r\n      {isLogin ? (\r\n        <LogoutButton />\r\n      ) : (\r\n        <>\r\n          <>\r\n            <LoginButton />\r\n          </>\r\n          <div style={{ marginLeft: 5 }}>\r\n            <JoinButton />\r\n          </div>\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useCallback, useEffect, useMemo } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useHistory } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport useSWRInfinite from 'swr/infinite';\r\nimport TweetList from '../../components/Tweet/TweetList';\r\nimport AddTweet from './AddTweet';\r\nimport { useAuthContext } from '../../context/AuthContext';\r\nimport Header from '../../components/Header/Header';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst getKey = (pageIndex: number, prevPageData: any) => {\r\n  if (prevPageData && !prevPageData.length) return null;\r\n  return `/timelines?page=${pageIndex}`;\r\n};\r\n\r\nexport default function Home() {\r\n  const history = useHistory();\r\n  const authStore = useAuthContext();\r\n\r\n  const { data, size, setSize, mutate, error } = useSWRInfinite(\r\n    getKey,\r\n    // (index) => `/timelines?page=${index + 1}`,\r\n    (url: string) => axios.get(url).then((res) => res.data)\r\n  );\r\n  // 이렇게 하지 않으면 배열 안에 배열이 계속 더해짐.\r\n  const tweets = useMemo(() => {\r\n    if (data) {\r\n      return [].concat(...data);\r\n    } else return [];\r\n  }, [data]);\r\n\r\n  const onChangeTimeLine = useCallback(() => {\r\n    mutate();\r\n    return;\r\n  }, [mutate]);\r\n\r\n  useEffect(() => {\r\n    console.log('size: ', size);\r\n  }, [size]);\r\n  useEffect(() => {\r\n    console.log('data: ', data);\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    if (!authStore.isLogin) {\r\n      history.push('/login');\r\n    }\r\n  }, [authStore, history]);\r\n\r\n  // 출처: https://stackoverflow.com/a/66414636\r\n  useEffect(() => {\r\n    const onScroll = function () {\r\n      if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {\r\n        console.log(\"you're at the bottom of the page\");\r\n        setSize(size + 1);\r\n      }\r\n    };\r\n    window.addEventListener('scroll', onScroll);\r\n    return () => window.removeEventListener('scroll', onScroll);\r\n  }, [setSize, size]);\r\n\r\n  if (!data) return <></>;\r\n  if (error)\r\n    return (\r\n      <Container>\r\n        <Header isLogin={authStore?.isLogin} />\r\n        <h5 style={{ marginTop: 30 }}>에러가 발생했습니다.</h5>\r\n      </Container>\r\n    );\r\n  return (\r\n    <Container>\r\n      <Header isLogin={authStore?.isLogin} />\r\n      <AddTweet\r\n        profile_color={authStore?.user?.profile_color}\r\n        onChangeTimeLine={onChangeTimeLine}\r\n      />\r\n      {/* @ts-ignore */}\r\n      {data && data.length === 0 && <h5>타임라인에 트윗이 없습니다.</h5>}\r\n      <TweetList\r\n        data={tweets}\r\n        user_id={authStore?.user?.user_id}\r\n        isLogin={authStore?.isLogin}\r\n        onChangeTimeLine={onChangeTimeLine}\r\n      />\r\n      {/* <button onClick={chagnePage}>Load More</button> */}\r\n    </Container>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/Logo blue.bf36f3f6.svg\";","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  background-color: rgb(29, 155, 240);\r\n  align-self: center;\r\n  width: 100%;\r\n  height: 52px;\r\n  border-radius: 10px;\r\n  box-sizing: border-box;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  color: #ffffff;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 1.2rem;\r\n  font-weight: 600;\r\n`;\r\n// @ts-ignore\r\nexport default function AuthButton({ text, onClick }) {\r\n  return <Button onClick={onClick}>{text}</Button>;\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Label } from 'reactstrap';\r\n\r\nconst Input = styled.input`\r\n  width: 100%;\r\n  height: 43px;\r\n  box-sizing: border-box;\r\n  margin-bottom: 12px;\r\n  border-radius: 3px;\r\n  padding-left: 16px;\r\n  font-size: 14px;\r\n`;\r\n\r\ninterface AuthInputProps {\r\n  value: string;\r\n  placeholder: string;\r\n  type: string;\r\n  labelText: string;\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nexport default function AuthInput({\r\n  value,\r\n  placeholder,\r\n  type,\r\n  labelText,\r\n  onChange,\r\n}: AuthInputProps) {\r\n  return (\r\n    <>\r\n      <Label for=\"auth-input\" md={2}>\r\n        {labelText}\r\n      </Label>\r\n      <Input\r\n        value={value}\r\n        placeholder={placeholder}\r\n        type={type}\r\n        onChange={onChange}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import React, { useCallback, useState } from 'react';\r\nimport { TwitterPicker, ColorResult } from 'react-color';\r\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  z-index: 1;\r\n  cursor: pointer;\r\n`;\r\n\r\ninterface IEditProfileProps {\r\n  color: string;\r\n  onChangeColor: (color: string) => void;\r\n}\r\n\r\nconst ProfileButton = styled.button<{ color: string }>`\r\n  width: 64px;\r\n  height: 64px;\r\n  border-radius: 50%;\r\n  border: 1px solid #dfdfdf;\r\n  background-color: ${(props) => props.color};\r\n`;\r\n\r\n// @ts-ignore\r\nexport default function EditProfile({\r\n  color,\r\n  onChangeColor,\r\n}: IEditProfileProps) {\r\n  const [showModal, setShowModal] = useState(false);\r\n  const onToggleModal = useCallback((e: React.MouseEvent<HTMLElement>) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    setShowModal((prev) => !prev);\r\n    return;\r\n  }, []);\r\n\r\n  const onSelectColorAndCloseModal = useCallback(\r\n    (color: ColorResult) => {\r\n      onChangeColor(color.hex);\r\n      setShowModal(false);\r\n    },\r\n    [onChangeColor]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Container onClick={onToggleModal}>\r\n        <ProfileButton color={color} />\r\n      </Container>\r\n\r\n      <Modal isOpen={showModal} toggle={onToggleModal}>\r\n        <ModalHeader toggle={onToggleModal}>\r\n          프로필 이미지를 선택하세요.\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <TwitterPicker\r\n            color={color}\r\n            onChangeComplete={onSelectColorAndCloseModal}\r\n          />\r\n        </ModalBody>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n","import axios from 'axios';\r\nimport React, { useState, useCallback } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport logo from '../../assets/Logo blue.svg';\r\nimport AuthButton from '../../components/AuthButton';\r\nimport AuthInput from '../../components/AuthInput';\r\nimport EditProfile from '../../components/Buttons/EditProfile';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  margin-top: 5%;\r\n`;\r\nconst WrapperDiv = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  min-width: 300px;\r\n  width: 25%;\r\n  box-sizing: border-box;\r\n  padding: 50px 10px;\r\n  margin: 0 auto;\r\n`;\r\nconst LogoSvg = styled.img`\r\n  width: 80px;\r\n  margin-bottom: 50px;\r\n`;\r\n\r\nexport default function Join() {\r\n  const history = useHistory();\r\n  const [profileColor, setProfileColor] = useState('#17517e');\r\n  const [userId, setUserId] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const onChangeUserId = useCallback(\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setUserId(e.target.value);\r\n    },\r\n    []\r\n  );\r\n  const onChangeName = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setName(e.target.value);\r\n  }, []);\r\n  const onChangeEmail = useCallback(\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setEmail(e.target.value);\r\n    },\r\n    []\r\n  );\r\n  const onChangePassword = useCallback(\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setPassword(e.target.value);\r\n    },\r\n    []\r\n  );\r\n  const onChangeColor = useCallback((color: string) => {\r\n    setProfileColor(color);\r\n  }, []);\r\n\r\n  const onSubmit = useCallback(\r\n    async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      e.preventDefault();\r\n      try {\r\n        await axios.post('/users', {\r\n          email,\r\n          password,\r\n          name,\r\n          user_id: userId,\r\n          profile_color: profileColor,\r\n        });\r\n        alert('회원 가입이 완료되었습니다. 로그인 페이지로 이동합니다.');\r\n        history.push('/login');\r\n        return;\r\n      } catch (error: any) {\r\n        console.log(error.response.data);\r\n        console.log(error.response.status);\r\n        console.log(error.response.headers);\r\n        alert(error.response.data);\r\n        return;\r\n      }\r\n    },\r\n    [email, history, name, password, profileColor, userId]\r\n  );\r\n\r\n  return (\r\n    <Container>\r\n      <WrapperDiv>\r\n        <LogoSvg src={logo} />\r\n        <form>\r\n          <EditProfile color={profileColor} onChangeColor={onChangeColor} />\r\n          <AuthInput\r\n            placeholder=\"아이디를 입력하세요\"\r\n            value={userId}\r\n            type=\"text\"\r\n            labelText=\"아이디\"\r\n            onChange={onChangeUserId}\r\n          />\r\n          <AuthInput\r\n            placeholder=\"이름을 입력하세요\"\r\n            value={name}\r\n            type=\"text\"\r\n            labelText=\"이름\"\r\n            onChange={onChangeName}\r\n          />\r\n          <AuthInput\r\n            placeholder=\"이메일를 입력하세요\"\r\n            value={email}\r\n            type=\"text\"\r\n            labelText=\"이메일\"\r\n            onChange={onChangeEmail}\r\n          />\r\n          <AuthInput\r\n            placeholder=\"비밀번호를 입력하세요\"\r\n            value={password}\r\n            type=\"password\"\r\n            labelText=\"비밀번호\"\r\n            onChange={onChangePassword}\r\n          />\r\n          <AuthButton text=\"회원가입\" onClick={onSubmit} />\r\n        </form>\r\n      </WrapperDiv>\r\n    </Container>\r\n  );\r\n}\r\n","import axios from 'axios';\r\nimport React, { useState, useCallback, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport logo from '../../assets/Logo blue.svg';\r\nimport AuthButton from '../../components/AuthButton';\r\nimport AuthInput from '../../components/AuthInput';\r\nimport {\r\n  useAuthContext,\r\n  useAuthDispatchContext,\r\n} from '../../context/AuthContext';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  margin-top: 5%;\r\n`;\r\nconst WrapperDiv = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  min-width: 300px;\r\n  width: 30%;\r\n  box-sizing: border-box;\r\n  padding: 50px 10px;\r\n  margin: 0 auto;\r\n`;\r\nconst LogoSvg = styled.img`\r\n  width: 80px;\r\n  margin-bottom: 50px;\r\n`;\r\nconst JoinWrapper = styled.div`\r\n  margin-top: 10px;\r\n  span {\r\n    cursor: pointer;\r\n    color: #1a0dab;\r\n    &:hover {\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function Login() {\r\n  const history = useHistory();\r\n  const [email, seEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const authStore = useAuthContext();\r\n  const authDispatch = useAuthDispatchContext();\r\n\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const onChangeUserId = useCallback(\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      seEmail(e.target.value);\r\n    },\r\n    []\r\n  );\r\n  const onChangePassword = useCallback(\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setPassword(e.target.value);\r\n    },\r\n    []\r\n  );\r\n  const onSubmit = useCallback(\r\n    async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      e.preventDefault();\r\n      try {\r\n        const response = await axios.post('/auth/login', { email, password });\r\n        // console.log('response', response.data);\r\n        authDispatch({ type: 'LOGIN', payload: response.data });\r\n\r\n        return history.push('/home');\r\n      } catch (error: any) {\r\n        console.log(error.response.data);\r\n        console.log(error.response.status);\r\n        console.log(error.response.headers);\r\n        alert(error.response.data);\r\n        return;\r\n      }\r\n    },\r\n    [authDispatch, email, history, password]\r\n  );\r\n\r\n  const moveToJoin = useCallback(() => {\r\n    history.push('/join');\r\n  }, [history]);\r\n\r\n  useEffect(() => {\r\n    if (authStore?.isLogin) {\r\n      history.push('/home');\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }, [authStore, history]);\r\n\r\n  if (loading) return <></>;\r\n\r\n  return (\r\n    <Container>\r\n      <WrapperDiv>\r\n        <LogoSvg src={logo} />\r\n        <form>\r\n          <AuthInput\r\n            placeholder=\"이메일를 입력하세요\"\r\n            value={email}\r\n            type=\"text\"\r\n            labelText=\"이메일\"\r\n            onChange={onChangeUserId}\r\n          />\r\n          <AuthInput\r\n            placeholder=\"비밀번호를 입력하세요\"\r\n            value={password}\r\n            type=\"password\"\r\n            labelText=\"비밀번호\"\r\n            onChange={onChangePassword}\r\n          />\r\n          <AuthButton text=\"로그인\" onClick={onSubmit} />\r\n          <JoinWrapper>\r\n            <span onClick={moveToJoin}>아이디가 없으신가요? 회원가입하기</span>\r\n          </JoinWrapper>\r\n        </form>\r\n      </WrapperDiv>\r\n    </Container>\r\n  );\r\n}\r\n","import axios from 'axios';\r\nimport React, { useCallback, useMemo } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nconst Button = styled.button<{ isFollow: boolean }>`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  align-self: center;\r\n  width: 94px;\r\n  height: 36px;\r\n  border-radius: 9999px;\r\n  box-sizing: border-box;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  font-size: 1.2rem;\r\n  font-weight: 600;\r\n  background-color: ${(props) => (props.isFollow ? '#fff' : '#000')};\r\n  color: ${(props) => (props.isFollow ? '#000' : '#fff')};\r\n`;\r\nconst ProfileEditButton = styled.button`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  align-self: center;\r\n  width: 120px;\r\n  height: 36px;\r\n  border-radius: 9999px;\r\n  box-sizing: border-box;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  font-size: 1.2rem;\r\n  font-weight: 600;\r\n  background-color: #fff;\r\n  color: #000;\r\n`;\r\n\r\ninterface IFollowButtonProps {\r\n  login_user_id: string;\r\n  target_user_id: string;\r\n  follower: string[];\r\n  isLoginedUserProfile?: boolean;\r\n  onChangeStatus?: any;\r\n}\r\n\r\nexport default function FollowButton({\r\n  login_user_id,\r\n  target_user_id,\r\n  follower,\r\n  isLoginedUserProfile,\r\n  onChangeStatus,\r\n}: IFollowButtonProps) {\r\n  const history = useHistory();\r\n  const isFollow = useMemo(() => {\r\n    if (follower && follower.includes(login_user_id)) {\r\n      return true;\r\n    } else return false;\r\n  }, [follower, login_user_id]);\r\n\r\n  const onChangeFollowStatus = useCallback(async () => {\r\n    try {\r\n      if (isFollow) await axios.patch('/users/unfollow', { target_user_id });\r\n      else await axios.patch('/users/follow', { target_user_id });\r\n      onChangeStatus();\r\n      return;\r\n    } catch (error: any) {\r\n      console.log(error.response.data);\r\n      console.log(error.response.status);\r\n      console.log(error.response.headers);\r\n      alert(error.response.data);\r\n      return;\r\n    }\r\n  }, [isFollow, onChangeStatus, target_user_id]);\r\n\r\n  const moveToEditPage = useCallback(\r\n    (e: React.MouseEvent<HTMLElement>) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      history.push('/setting');\r\n    },\r\n    [history]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {isLoginedUserProfile ? (\r\n        <ProfileEditButton onClick={moveToEditPage}>\r\n          <span>프로필 수정</span>\r\n        </ProfileEditButton>\r\n      ) : (\r\n        <Button isFollow={isFollow} onClick={onChangeFollowStatus}>\r\n          {isFollow ? '팔로잉' : '팔로우'}\r\n        </Button>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport FollowButton from '../../components/Buttons/FollowButton';\r\nimport ProfileImage from '../../components/ProfileImage';\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  min-height: 200px;\r\n  box-sizing: border-box;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n  padding-top: 12px;\r\n  margin-bottom: 16px;\r\n`;\r\nconst ProfileWrapper = styled.div`\r\n  position: relative;\r\n  .profile-user-name {\r\n    font-weight: bold;\r\n  }\r\n  .profile-user-id {\r\n    color: rgb(83, 100, 113);\r\n  }\r\n`;\r\nconst DescriptionWrapper = styled.div`\r\n  margin-top: 10px;\r\n  margin-bottom: 10px;\r\n  span {\r\n    font-size: 1.1rem;\r\n  }\r\n`;\r\nconst FollowButtonWrapper = styled.div`\r\n  position: absolute;\r\n  bottom: 10%;\r\n  right: 0;\r\n`;\r\n\r\nconst FollowCountWrapper = styled.div`\r\n  width: 100%;\r\n  height: 48px;\r\n`;\r\nconst CountArea = styled.div`\r\n  display: inline-block;\r\n  .count {\r\n    font-weight: bold;\r\n  }\r\n  .count-text {\r\n    margin-left: 3px;\r\n  }\r\n`;\r\n\r\ninterface IUserProfileProps {\r\n  login_user_id: string;\r\n  user_id: string;\r\n  name: string;\r\n  profile_color: string;\r\n  description: string;\r\n  following?: string[];\r\n  follower: string[];\r\n  follower_count: number;\r\n  following_count: number;\r\n  isLoginedUserProfile?: boolean;\r\n  onChangeStatus?: any;\r\n}\r\nexport default function UserProfile({\r\n  login_user_id,\r\n  user_id,\r\n  name,\r\n  profile_color,\r\n  description,\r\n  follower,\r\n  follower_count,\r\n  following_count,\r\n  isLoginedUserProfile,\r\n  onChangeStatus,\r\n}: IUserProfileProps) {\r\n  return (\r\n    <Container>\r\n      <ProfileWrapper>\r\n        <>\r\n          <ProfileImage size=\"big\" color={profile_color} />\r\n          <div style={{ marginTop: 10 }}>\r\n            <span className=\"profile-user-name\">{name}</span>\r\n          </div>\r\n          <div>\r\n            <span className=\"profile-user-id\">{`@${user_id}`}</span>\r\n          </div>\r\n        </>\r\n        <FollowButtonWrapper>\r\n          <FollowButton\r\n            target_user_id={user_id}\r\n            isLoginedUserProfile={isLoginedUserProfile}\r\n            follower={follower}\r\n            login_user_id={login_user_id}\r\n            onChangeStatus={onChangeStatus}\r\n          />\r\n        </FollowButtonWrapper>\r\n      </ProfileWrapper>\r\n      <DescriptionWrapper>\r\n        <span>{description}</span>\r\n      </DescriptionWrapper>\r\n      <FollowCountWrapper>\r\n        <CountArea className=\"count-area\">\r\n          <span className=\"count\">{following_count}</span>\r\n          <span className=\"count-text\">팔로우 중</span>\r\n        </CountArea>\r\n\r\n        <CountArea className=\"count-area\" style={{ marginLeft: 10 }}>\r\n          <span className=\"count\">{follower_count}</span>\r\n          <span className=\"count-text\">팔로워</span>\r\n        </CountArea>\r\n      </FollowCountWrapper>\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport useSWR, { useSWRConfig, SWRConfig } from 'swr';\r\nimport { useAuthContext } from '../../context/AuthContext';\r\nimport TweetList from '../../components/Tweet/TweetList';\r\nimport Header from '../../components/Header/Header';\r\nimport UserProfile from './UserProfile';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport default function User() {\r\n  const params: { userid: string } = useParams();\r\n  const authStore = useAuthContext();\r\n  const { mutate } = useSWRConfig();\r\n  const { data, error } = useSWR(`/timelines/${params.userid}`, (url) =>\r\n    axios.get(url).then((res) => res.data)\r\n  );\r\n\r\n  const onChangeTimeLine = useCallback(() => {\r\n    mutate(`/timelines/${params.userid}`);\r\n    return;\r\n  }, [mutate, params.userid]);\r\n\r\n  if (!data) return <></>;\r\n  if (error)\r\n    return (\r\n      <Container>\r\n        <Header isLogin={authStore?.isLogin} />\r\n        <div style={{ marginTop: 10 }}>\r\n          <h5>에러가 발생했습니다.</h5>\r\n        </div>\r\n      </Container>\r\n    );\r\n\r\n  return (\r\n    <Container>\r\n      <Header isLogin={authStore?.isLogin} />\r\n      <UserProfile\r\n        login_user_id={authStore?.user?.user_id}\r\n        user_id={data?.user.user_id}\r\n        name={data?.user.name}\r\n        profile_color={data?.user.profile_color}\r\n        description={data?.user.description}\r\n        following={data?.user.following}\r\n        follower={data?.user.follower}\r\n        follower_count={data?.user.follower_count}\r\n        following_count={data?.user.following_count}\r\n        isLoginedUserProfile={authStore?.user?.user_id === data?.user.user_id}\r\n        onChangeStatus={onChangeTimeLine}\r\n      />\r\n      {data?.timeLine.length === 0 && <h5>타임라인에 트윗이 없습니다.</h5>}\r\n      <TweetList\r\n        data={data?.timeLine}\r\n        user_id={authStore?.user?.user_id}\r\n        isLogin={authStore?.isLogin}\r\n        onChangeTimeLine={onChangeTimeLine}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useAuthContext } from '../../context/AuthContext';\r\n\r\nexport default function Main() {\r\n  const history = useHistory();\r\n  const authStore = useAuthContext();\r\n\r\n  useEffect(() => {\r\n    if (authStore.isLogin) {\r\n      history.push('/home');\r\n    } else {\r\n      history.push('/login');\r\n    }\r\n  }, [authStore, history]);\r\n  return <></>;\r\n}\r\n","import React, { useCallback, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { ITweet } from '../../types';\r\nimport ProfileImage from '../ProfileImage';\r\nimport Comment from '../Buttons/Comment';\r\nimport Retweet from '../Buttons/Retweet';\r\nimport Heart from '../Buttons/Heart';\r\nimport Share from '../Buttons/Share';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  z-index: 0;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  box-sizing: border-box;\r\n  padding: 12px 16px;\r\n  border-top: 1px solid rgb(239, 243, 244);\r\n  border-bottom: 1px solid rgb(239, 243, 244);\r\n`;\r\nconst ProfileArea = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  margin-bottom: 10px;\r\n`;\r\nconst UserName = styled.a`\r\n  color: black;\r\n  text-decoration: none;\r\n  font-weight: bold;\r\n`;\r\nconst UserId = styled.span`\r\n  font-size: 0.8rem;\r\n  color: rgb(83, 100, 113);\r\n`;\r\nconst ContentsArea = styled.div`\r\n  position: relative;\r\n  .contents-div {\r\n    font-size: 1.1rem;\r\n    font-weight: 500;\r\n  }\r\n  .time-div {\r\n    font-size: 0.9rem;\r\n    font-weight: 400;\r\n  }\r\n`;\r\n\r\nconst CountsWrapper = styled.div`\r\n  width: 100%;\r\n  height: 48px;\r\n  box-sizing: border-box;\r\n  padding: 12px 16px;\r\n  border-bottom: 1px solid rgb(239, 243, 244);\r\n`;\r\nconst CountArea = styled.div`\r\n  display: inline-block;\r\n  .count {\r\n    font-weight: bold;\r\n  }\r\n  .count-text {\r\n    margin-left: 3px;\r\n  }\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 48px;\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  box-sizing: border-box;\r\n  border-bottom: 1px solid rgb(239, 243, 244);\r\n`;\r\n\r\ninterface ISmallTweetProps {\r\n  value: ITweet;\r\n  user_id: string;\r\n  isLogin: boolean;\r\n  onChangeTweet?: any;\r\n}\r\n\r\n//@ts-ignore\r\nexport default function DetailTweet({\r\n  value,\r\n  user_id,\r\n  isLogin,\r\n  onChangeTweet,\r\n}: ISmallTweetProps) {\r\n  return (\r\n    <Container>\r\n      <Wrapper>\r\n        <ProfileArea>\r\n          <ProfileImage\r\n            size=\"small\"\r\n            color={value?.user?.profile_color}\r\n            user_id={value?.user?.user_id}\r\n          />\r\n          <div className=\"name-id-field\" style={{ marginLeft: 10 }}>\r\n            <div className=\"user_name\">\r\n              <UserName>{value?.user?.name}</UserName>\r\n            </div>\r\n            <div className=\"user_id\">\r\n              <UserId>{`@${value?.user?.user_id}`}</UserId>\r\n            </div>\r\n          </div>\r\n        </ProfileArea>\r\n\r\n        <ContentsArea>\r\n          <div className=\"contents-div\" style={{ marginTop: 5 }}>\r\n            <span>{value?.contents}</span>\r\n          </div>\r\n          <div className=\"time-div\" style={{ marginTop: 5 }}>\r\n            <span>{value?.create_date}</span>\r\n          </div>\r\n        </ContentsArea>\r\n      </Wrapper>\r\n\r\n      <CountsWrapper>\r\n        {value?.retweet_count === 0 && value?.like_count === 0 && (\r\n          <p>트윗 활동이 없습니다.</p>\r\n        )}\r\n        {value?.retweet_count > 0 && (\r\n          <CountArea className=\"count-area\">\r\n            <span className=\"count\">{value?.retweet_count}</span>\r\n            <span className=\"count-text\">리트윗</span>\r\n          </CountArea>\r\n        )}\r\n        {value?.like_count > 0 && (\r\n          <CountArea className=\"count-area\" style={{ marginLeft: 10 }}>\r\n            <span className=\"count\">{value?.like_count}</span>\r\n            <span className=\"count-text\">마음에 들어요</span>\r\n          </CountArea>\r\n        )}\r\n      </CountsWrapper>\r\n\r\n      <ButtonWrapper>\r\n        <Comment comments={value?.comments} showCount={false} />\r\n        <Retweet\r\n          retweet={value?.retweet}\r\n          user_id={user_id}\r\n          isLogin={isLogin}\r\n          showCount={false}\r\n          tweet_id={value?.tweet_id}\r\n          onChangeTimeLine={onChangeTweet}\r\n        />\r\n        <Heart\r\n          like={value?.like}\r\n          user_id={user_id}\r\n          isLogin={isLogin}\r\n          showCount={false}\r\n          tweet_id={value?.tweet_id}\r\n          onChangeTimeLine={onChangeTweet}\r\n        />\r\n        <Share />\r\n      </ButtonWrapper>\r\n    </Container>\r\n  );\r\n}\r\n","import axios from 'axios';\r\nimport React, { useCallback, useState } from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport styled from 'styled-components';\r\nimport ProfileImage from '../../components/ProfileImage';\r\nimport createRandomTweetId from '../../util/createRandomTweetId';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n`;\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  min-height: 100px;\r\n  display: flex;\r\n  align-items: center;\r\n  box-sizing: border-box;\r\n  padding: 12px 16px;\r\n  border-top: 1px solid rgb(239, 243, 244);\r\n  border-bottom: 1px solid rgb(239, 243, 244);\r\n`;\r\nconst ContentsArea = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: end;\r\n  width: 100%;\r\n  margin-left: 10px;\r\n`;\r\nconst Input = styled.input`\r\n  width: 100%;\r\n  max-width: 510px;\r\n  height: 52px;\r\n  border: 0;\r\n  min-height: 28px;\r\n  box-sizing: border-box;\r\n  padding-left: 16px;\r\n  font-size: 18px;\r\n  &&:focus {\r\n    outline: none;\r\n  }\r\n`;\r\nconst SubmitButton = styled(Button)`\r\n  width: 94px;\r\n  height: 36px;\r\n  background-color: rgb(29, 155, 240);\r\n  border-radius: 20px;\r\n  border: 0;\r\n\r\n  p {\r\n    color: #fff;\r\n    font-weight: bold;\r\n  }\r\n`;\r\ninterface IAddCommentProp {\r\n  profile_color: string;\r\n  target_tweet_id: number;\r\n  onChangeTweet: any;\r\n}\r\nexport default function AddComment({\r\n  profile_color,\r\n  target_tweet_id,\r\n  onChangeTweet,\r\n}: IAddCommentProp) {\r\n  const [contents, setContents] = useState('');\r\n\r\n  const inputContents = useCallback(\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setContents(e.target.value);\r\n    },\r\n    []\r\n  );\r\n\r\n  const onSubmit = useCallback(async () => {\r\n    try {\r\n      const tweet_id = createRandomTweetId();\r\n      await axios.post('/tweets/comment', {\r\n        tweet_id,\r\n        contents,\r\n        target_tweet_id,\r\n      });\r\n      onChangeTweet();\r\n      setContents('');\r\n      return;\r\n    } catch (error: any) {\r\n      console.log(error.response.data);\r\n      console.log(error.response.status);\r\n      console.log(error.response.headers);\r\n      alert(error.response.data);\r\n      return;\r\n    }\r\n  }, [contents, onChangeTweet, target_tweet_id]);\r\n\r\n  return (\r\n    <Container>\r\n      <Wrapper>\r\n        <ProfileImage size=\"small\" color={profile_color} />\r\n        <ContentsArea>\r\n          <Input\r\n            value={contents}\r\n            placeholder=\"내 답글을 트윗합니다.\"\r\n            type=\"text\"\r\n            onChange={inputContents}\r\n            maxLength={140}\r\n          />\r\n          <SubmitButton onClick={onSubmit}>\r\n            <p>답글</p>\r\n          </SubmitButton>\r\n        </ContentsArea>\r\n      </Wrapper>\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\nimport useSWR, { useSWRConfig } from 'swr';\r\nimport Header from '../../components/Header/Header';\r\nimport { useAuthContext } from '../../context/AuthContext';\r\nimport DetailTweet from '../../components/Tweet/DetailTweet';\r\nimport AddComment from './AddComment';\r\nimport TweetList from '../../components/Tweet/TweetList';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n`;\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  border-left: 1px solid rgb(239, 243, 244);\r\n  border-right: 1px solid rgb(239, 243, 244);\r\n`;\r\n\r\nexport default function Tweet() {\r\n  const authStore = useAuthContext();\r\n  const params: { user: string; tweetid: string } = useParams();\r\n  const { mutate } = useSWRConfig();\r\n  const { data, error } = useSWR(`/tweets/${params.tweetid}`, (url) =>\r\n    axios.get(url).then((res) => res.data)\r\n  );\r\n\r\n  const onChangeTweet = useCallback(() => {\r\n    // 답글을 작성한 후 트윗을 갱신합니다.\r\n    mutate(`/tweets/${params.tweetid}`);\r\n    return;\r\n  }, [mutate, params.tweetid]);\r\n\r\n  if (!data) return <></>;\r\n  if (error)\r\n    return (\r\n      <Container>\r\n        <Header isLogin={authStore?.isLogin} />\r\n        <Wrapper>\r\n          <h5 style={{ marginTop: 30 }}>에러가 발생했습니다.</h5>\r\n        </Wrapper>\r\n      </Container>\r\n    );\r\n\r\n  return (\r\n    <Container>\r\n      <Header isLogin={authStore?.isLogin} />\r\n      <Wrapper>\r\n        <DetailTweet\r\n          value={data?.origin}\r\n          user_id={authStore?.user?.user_id}\r\n          isLogin={authStore?.isLogin}\r\n          onChangeTweet={onChangeTweet}\r\n        />\r\n        {authStore?.isLogin && (\r\n          <AddComment\r\n            profile_color={authStore?.user?.profile_color}\r\n            target_tweet_id={data?.origin?.tweet_id}\r\n            onChangeTweet={onChangeTweet}\r\n          />\r\n        )}\r\n        {/* comments 에다 각각 작은트윗 불러오기 */}\r\n        <TweetList\r\n          data={data?.comments}\r\n          user_id={authStore?.user?.user_id}\r\n          isLogin={authStore?.isLogin}\r\n          onChangeTimeLine={onChangeTweet}\r\n        />\r\n      </Wrapper>\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useState, useCallback, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport styled from 'styled-components';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n  useAuthContext,\r\n  useAuthDispatchContext,\r\n} from '../../context/AuthContext';\r\nimport AuthButton from '../../components/AuthButton';\r\nimport AuthInput from '../../components/AuthInput';\r\nimport EditProfile from '../../components/Buttons/EditProfile';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  margin-top: 5%;\r\n`;\r\nconst WrapperDiv = styled.div`\r\n  width: 100%;\r\n  max-width: 300px;\r\n  box-sizing: border-box;\r\n  padding: 50px 10px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport default function Setting() {\r\n  const authStore = useAuthContext();\r\n  const dispatch = useAuthDispatchContext();\r\n  const [loading, setLoading] = useState(true);\r\n  const [name, setName] = useState('');\r\n  const [profileColor, setProfileColor] = useState('#17517e');\r\n  const [description, setDescription] = useState('');\r\n\r\n  useEffect(() => {\r\n    setName(authStore?.user.name);\r\n    setProfileColor(authStore?.user.profile_color);\r\n    setDescription(authStore?.user.description);\r\n    setLoading(false);\r\n  }, [\r\n    authStore?.user.description,\r\n    authStore?.user.name,\r\n    authStore?.user.profile_color,\r\n  ]);\r\n\r\n  const onChangeName = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setName(e.target.value);\r\n  }, []);\r\n  const onChangeDescription = useCallback(\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setDescription(e.target.value);\r\n    },\r\n    []\r\n  );\r\n  const onChangeColor = useCallback((color: string) => {\r\n    setProfileColor(color);\r\n  }, []);\r\n\r\n  const onSubmit = useCallback(\r\n    async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      e.preventDefault();\r\n      try {\r\n        await axios.patch('/users', {\r\n          name,\r\n          description,\r\n          profile_color: profileColor,\r\n        });\r\n        toast('수정을 완료했습니다.', {\r\n          position: toast.POSITION.BOTTOM_CENTER,\r\n        });\r\n        dispatch({\r\n          type: 'CHANGE_PROFILE',\r\n          payload: { name, profile_color: profileColor, description },\r\n        });\r\n        return;\r\n      } catch (error: any) {\r\n        console.log(error.response.data);\r\n        console.log(error.response.status);\r\n        console.log(error.response.headers);\r\n        alert(error.response.data);\r\n        return;\r\n      }\r\n    },\r\n    [description, dispatch, name, profileColor]\r\n  );\r\n\r\n  if (loading) return <></>;\r\n  return (\r\n    <Container>\r\n      <WrapperDiv>\r\n        <form>\r\n          <EditProfile color={profileColor} onChangeColor={onChangeColor} />\r\n          <AuthInput\r\n            placeholder=\"이름을 입력하세요\"\r\n            value={name}\r\n            type=\"text\"\r\n            labelText=\"이름\"\r\n            onChange={onChangeName}\r\n          />\r\n          <AuthInput\r\n            placeholder=\"자기소개를 입력하세요\"\r\n            value={description}\r\n            type=\"text\"\r\n            labelText=\"자기소개\"\r\n            onChange={onChangeDescription}\r\n          />\r\n\r\n          <AuthButton text=\"프로필 수정\" onClick={onSubmit} />\r\n        </form>\r\n      </WrapperDiv>\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useCallback, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Route, Switch } from 'react-router-dom';\nimport { useAuthDispatchContext } from './context/AuthContext';\nimport Home from './pages/Home';\nimport Join from './pages/Join';\nimport Login from './pages/Login';\nimport User from './pages/User';\nimport Main from './pages/Main';\nimport Tweet from './pages/Tweet';\nimport Setting from './pages/Setting';\n\nfunction App() {\n  const authDispatch = useAuthDispatchContext();\n  const [loading, setLoading] = useState(true);\n\n  const sessionLogin = useCallback(async () => {\n    try {\n      const response = await axios.get('/auth/token');\n      // console.log('서버의 세션으로 정보 불러오기 결과', response.data);\n      authDispatch({ type: 'LOGIN', payload: response.data });\n      setTimeout(() => {\n        setLoading(false);\n      }, 100);\n      return;\n    } catch (error) {\n      setLoading(false);\n      return;\n    }\n  }, [authDispatch]);\n\n  useEffect(() => {\n    sessionLogin();\n  }, [sessionLogin]);\n\n  if (loading) return <></>;\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={Main} exact />\n      <Route path=\"/home\" component={Home} exact />\n      <Route path=\"/login\" component={Login} exact />\n      <Route path=\"/join\" component={Join} exact />\n      <Route path=\"/setting\" component={Setting} exact />\n      <Route path=\"/:userid\" component={User} exact />\n      <Route path=\"/:user/status/:tweetid\" component={Tweet} exact />\n    </Switch>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ToastContainer } from 'react-toastify';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { AuthProvider } from './context/AuthContext';\n\naxios.defaults.withCredentials = true;\naxios.defaults.baseURL = '/api';\n// axios.defaults.baseURL = 'http://localhost:5000/api';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <AuthProvider>\n        <App />\n        <ToastContainer hideProgressBar />\n      </AuthProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}